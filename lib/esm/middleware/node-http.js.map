{
  "version": 3,
  "sources": ["../../../src/middleware/node-http.ts"],
  "sourcesContent": ["import { WhatsAppAPIMiddleware } from \"./globals.js\";\nimport { isInteger } from \"../utils.js\";\n\nimport type { IncomingMessage } from \"node:http\";\nimport type { Readable } from \"node:stream\";\n\nimport type { GetParams } from \"../types\";\n\n/**\n * node:http server middleware for WhatsAppAPI\n */\nexport class WhatsAppAPI extends WhatsAppAPIMiddleware {\n    /**\n     * POST request handler for node:http server\n     *\n     * @example\n     * ```ts\n     * import { createServer, type IncomingMessage, type ServerResponse } from 'node:http';\n     * import { WhatsAppAPI } from \"whatsapp-api-js/middleware/node-http\";\n     *\n     * const Whatsapp = new WhatsAppAPI({\n     *     token: \"YOUR_TOKEN\",\n     *     appSecret: \"YOUR_APP_SECRET\",\n     *     webhookVerifyToken: \"YOUR_WEBHOOK_VERIFY_TOKEN\"\n     * });\n     *\n     * const server = createServer(async (request: IncomingMessage, response: ServerResponse) => {\n     *     if (request.url === \"/message\" && request.method === \"POST\") {\n     *         response.statusCode = await Whatsapp.handle_post(request);\n     *         response.end();\n     *     }\n     * });\n     *\n     * server.listen(5000);\n     * ```\n     *\n     * @override\n     * @param req - The request object\n     * @returns The status code to be sent to the client\n     */\n    async handle_post(req: IncomingMessage): Promise<number> {\n        /**\n         * Copy pasted from an issue on Deno's repository :)\n         *\n         * @internal\n         * @param readable - The readable stream\n         * @returns The parsed body\n         */\n        async function parseBody(readable: Readable) {\n            const chunks = [];\n\n            for await (const chunk of readable) {\n                chunks.push(\n                    typeof chunk === \"string\" ? Buffer.from(chunk) : chunk\n                );\n            }\n\n            return Buffer.concat(chunks).toString(\"utf-8\");\n        }\n\n        try {\n            const body = await parseBody(req);\n            const signature = req.headers[\"x-hub-signature-256\"];\n\n            if (typeof signature !== \"string\") throw 400;\n\n            await this.post(JSON.parse(body || \"{}\"), body, signature);\n\n            return 200;\n        } catch (e) {\n            // In case the JSON.parse fails \u00AF\\_(\u30C4)_/\u00AF\n            return isInteger(e) ? e : 500;\n        }\n    }\n\n    /**\n     * GET request handler for node:http server\n     *\n     * @example\n     * ```ts\n     * import { createServer, IncomingMessage, ServerResponse } from 'node:http';\n     * import { WhatsAppAPI } from \"whatsapp-api-js/middleware/node-http\";\n     *\n     * const server = createServer((request: IncomingMessage, response: ServerResponse) => {\n     *     if (request.url === \"/message\" && request.method === \"GET\") {\n     *         try {\n     *             response.statusCode = 200;\n     *             response.end(Whatsapp.handle_get(request));\n     *         } catch (e) {\n     *             response.statusCode = e as number;\n     *             response.end();\n     *         }\n     *     }\n     * });\n     *\n     * server.listen(5000);\n     * ```\n     *\n     * @override\n     * @param req - The request object\n     * @returns The challenge string to be sent to the client\n     * @throws The error code\n     */\n    handle_get(req: IncomingMessage): string {\n        try {\n            return this.get(\n                Object.fromEntries(\n                    new URL(req.url!, `http://${req.headers.host}`).searchParams\n                ) as GetParams\n            );\n        } catch (e) {\n            // In case who knows what fails \u00AF\\_(\u30C4)_/\u00AF\n            throw isInteger(e) ? e : 500;\n        }\n    }\n}\n"],
  "mappings": "AAAA,SAAS,6BAA6B;AACtC,SAAS,iBAAiB;AAUnB,MAAM,oBAAoB,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA6BnD,MAAM,YAAY,KAAuC;AAQrD,mBAAe,UAAU,UAAoB;AACzC,YAAM,SAAS,CAAC;AAEhB,uBAAiB,SAAS,UAAU;AAChC,eAAO;AAAA,UACH,OAAO,UAAU,WAAW,OAAO,KAAK,KAAK,IAAI;AAAA,QACrD;AAAA,MACJ;AAEA,aAAO,OAAO,OAAO,MAAM,EAAE,SAAS,OAAO;AAAA,IACjD;AAEA,QAAI;AACA,YAAM,OAAO,MAAM,UAAU,GAAG;AAChC,YAAM,YAAY,IAAI,QAAQ,qBAAqB;AAEnD,UAAI,OAAO,cAAc,SAAU,OAAM;AAEzC,YAAM,KAAK,KAAK,KAAK,MAAM,QAAQ,IAAI,GAAG,MAAM,SAAS;AAEzD,aAAO;AAAA,IACX,SAAS,GAAG;AAER,aAAO,UAAU,CAAC,IAAI,IAAI;AAAA,IAC9B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA8BA,WAAW,KAA8B;AACrC,QAAI;AACA,aAAO,KAAK;AAAA,QACR,OAAO;AAAA,UACH,IAAI,IAAI,IAAI,KAAM,UAAU,IAAI,QAAQ,IAAI,EAAE,EAAE;AAAA,QACpD;AAAA,MACJ;AAAA,IACJ,SAAS,GAAG;AAER,YAAM,UAAU,CAAC,IAAI,IAAI;AAAA,IAC7B;AAAA,EACJ;AACJ;",
  "names": []
}
