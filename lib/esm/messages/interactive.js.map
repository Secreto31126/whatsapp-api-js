{
  "version": 3,
  "sources": ["../../../src/messages/interactive.ts"],
  "sourcesContent": ["import {\n    ClientMessage,\n    ClientLimitedMessageComponent,\n    Section,\n    type InteractiveAction\n} from \"../types.js\";\nimport type { AtLeastOne } from \"../utils\";\n\nimport type { Document, Image, Video } from \"./media\";\n\nimport { Product, ProductSection, isProductSections } from \"./globals.js\";\n\n/**\n * Interactive API object\n *\n * @group Interactive\n */\nexport class Interactive extends ClientMessage {\n    /**\n     * The action component of the interactive message\n     */\n    readonly action: InteractiveAction;\n    /**\n     * The body component of the interactive message\n     */\n    readonly body?: Body;\n    /**\n     * The header component of the interactive message\n     */\n    readonly header?: Header;\n    /**\n     * The footer component of the interactive message\n     */\n    readonly footer?: Footer;\n\n    /**\n     * The type of the interactive message\n     */\n    readonly type: InteractiveAction[\"_type\"];\n\n    /**\n     * @override\n     * @internal\n     */\n    get _type(): \"interactive\" {\n        return \"interactive\";\n    }\n\n    /**\n     * Create an Interactive object for the API\n     *\n     * @param action - The action component of the interactive message\n     * @param body - The body component of the interactive message, it may be undefined if not needed.\n     * @param header - The header component of the interactive message, it may be undefined if not needed.\n     * @param footer - The footer component of the interactive message, it may be undefined if not needed.\n     * @throws If body is not provided, unless action is an {@link ActionProduct} with a single product\n     * @throws If header is provided for an {@link ActionProduct} with a single product\n     * @throws If header of type text is not provided for an {@link ActionProduct} with a product list\n     * @throws If header is not of type text, unless action is an {@link ActionButtons}\n     */\n    constructor(\n        action: InteractiveAction,\n        body?: Body,\n        header?: Header,\n        footer?: Footer\n    ) {\n        super();\n\n        if (action._type !== \"product\" && !body)\n            throw new Error(\"Interactive must have a body component\");\n        if (action._type === \"product\" && header)\n            throw new Error(\n                \"Interactive must not have a header component if action is a single product\"\n            );\n        if (action._type === \"product_list\" && header?.type !== \"text\")\n            throw new Error(\n                \"Interactive must have a text header component if action is a product list\"\n            );\n        if (header && action._type !== \"button\" && header?.type !== \"text\")\n            throw new Error(\"Interactive header must be of type text\");\n\n        this.type = action._type;\n\n        this.action = action;\n        if (body) this.body = body;\n        if (header) this.header = header;\n        if (footer) this.footer = footer;\n    }\n}\n\n/**\n * Body API object\n *\n * @group Interactive\n */\nexport class Body {\n    /**\n     * The text of the body\n     */\n    readonly text: string;\n\n    /**\n     * Builds a body component for an Interactive message\n     *\n     * @param text - The text of the message. Maximum length: 1024 characters.\n     * @throws If text is over 1024 characters\n     */\n    constructor(text: string) {\n        if (text.length > 1024)\n            throw new Error(\"Body text must be less than 1024 characters\");\n\n        this.text = text;\n    }\n}\n\n/**\n * Footer API object\n *\n * @group Interactive\n */\nexport class Footer {\n    /**\n     * The text of the footer\n     */\n    readonly text: string;\n\n    /**\n     * Builds a footer component for an Interactive message\n     *\n     * @param text - Text of the footer. Maximum length: 60 characters.\n     * @throws If text is over 60 characters\n     */\n    constructor(text: string) {\n        if (text.length > 60)\n            throw new Error(\"Footer text must be 60 characters or less\");\n\n        this.text = text;\n    }\n}\n\n/**\n * Header API object\n *\n * @group Interactive\n */\nexport class Header {\n    /**\n     * The type of the header\n     */\n    readonly type: \"text\" | \"image\" | \"video\" | \"document\";\n    /**\n     * The text of the parameter\n     */\n    readonly text?: string;\n    /**\n     * The image of the parameter\n     */\n    readonly image?: Image;\n    /**\n     * The document of the parameter\n     */\n    readonly document?: Document;\n    /**\n     * The video of the parameter\n     */\n    readonly video?: Video;\n\n    /**\n     * Builds a header component for an Interactive message\n     *\n     * @param object - The message object for the header\n     * @throws If object is a string and is over 60 characters\n     * @throws If object is a Media and has a caption\n     */\n    constructor(object: Document | Image | Video | string) {\n        // All interactive's header can go to hell with its \"exceptions\"\n        if (typeof object === \"string\") {\n            if (object.length > 60)\n                throw new Error(\"Header text must be 60 characters or less\");\n\n            this.type = \"text\";\n        } else {\n            this.type = object._type;\n            if (object.caption)\n                throw new Error(`Header ${this.type} must not have a caption`);\n        }\n\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore - TS dumb, the _type will always match the message type\n        this[this.type] = object;\n    }\n}\n\n/**\n * Action API object\n *\n * @group Interactive\n */\nexport class ActionButtons\n    extends ClientLimitedMessageComponent<Button, 3>\n    implements InteractiveAction\n{\n    /**\n     * The buttons of the action\n     */\n    readonly buttons: Button[];\n\n    /**\n     * @override\n     * @internal\n     */\n    get _type(): \"button\" {\n        return \"button\";\n    }\n\n    /**\n     * Builds a reply buttons component for an Interactive message\n     *\n     * @param button - Buttons to be used in the reply buttons. Each button title must be unique within the message. Emojis are supported, markdown is not. Must be between 1 and 3 buttons.\n     * @throws If more than 3 buttons are provided\n     * @throws If two or more buttons have the same id\n     * @throws If two or more buttons have the same title\n     */\n    constructor(...button: AtLeastOne<Button>) {\n        super(\"Reply buttons\", \"button\", button, 3);\n\n        // Find if there are duplicates in button.id\n        const ids = button.map((b) => b[b.type].id);\n        if (ids.length !== new Set(ids).size)\n            throw new Error(\"Reply buttons must have unique ids\");\n\n        // Find if there are duplicates in button.title\n        const titles = button.map((b) => b[b.type].title);\n        if (titles.length !== new Set(titles).size)\n            throw new Error(\"Reply buttons must have unique titles\");\n\n        this.buttons = button;\n    }\n}\n\n/**\n * Button API object\n *\n * @group Interactive\n */\nexport class Button {\n    /**\n     * The type of the button\n     */\n    readonly type: \"reply\";\n    /**\n     * The reply object of the row\n     */\n    readonly reply: {\n        /**\n         * The id of the row\n         */\n        id: string;\n        /**\n         * The title of the row\n         */\n        title: string;\n    };\n\n    /**\n     * Builds a button component for ActionButtons\n     *\n     * @param id - Unique identifier for your button. It cannot have leading or trailing spaces. This ID is returned in the webhook when the button is clicked by the user. Maximum length: 256 characters.\n     * @param title - Button title. It cannot be an empty string and must be unique within the message. Emojis are supported, markdown is not. Maximum length: 20 characters.\n     * @throws If id is over 256 characters\n     * @throws If id is malformed\n     * @throws If title is an empty string\n     * @throws If title is over 20 characters\n     */\n    constructor(id: string, title: string) {\n        if (id.length > 256)\n            throw new Error(\"Button id must be 256 characters or less\");\n        if (/^ | $/.test(id))\n            throw new Error(\"Button id cannot have leading or trailing spaces\");\n        if (!title.length)\n            throw new Error(\"Button title cannot be an empty string\");\n        if (title.length > 20)\n            throw new Error(\"Button title must be 20 characters or less\");\n\n        this.type = \"reply\";\n        this.reply = {\n            title,\n            id\n        };\n    }\n}\n\n/**\n * Action API object\n *\n * @group Interactive\n */\nexport class ActionList\n    extends ClientLimitedMessageComponent<ListSection, 10>\n    implements InteractiveAction\n{\n    /**\n     * The button text\n     */\n    readonly button: string;\n    /**\n     * The sections of the action\n     */\n    readonly sections: ListSection[];\n\n    /**\n     * @override\n     * @internal\n     */\n    get _type(): \"list\" {\n        return \"list\";\n    }\n\n    /**\n     * Builds an action component for an Interactive message\n     * Required if interactive type is \"list\"\n     *\n     * @param button - Button content. It cannot be an empty string and must be unique within the message. Emojis are supported, markdown is not. Maximum length: 20 characters.\n     * @param sections - Sections of the list\n     * @throws If button is an empty string\n     * @throws If button is over 20 characters\n     * @throws If more than 10 sections are provided\n     * @throws If more than 1 section is provided and at least one doesn't have a title\n     */\n    constructor(button: string, ...sections: AtLeastOne<ListSection>) {\n        super(\"Action\", \"sections\", sections, 10);\n\n        if (!button.length)\n            throw new Error(\"Button content cannot be an empty string\");\n        if (button.length > 20)\n            throw new Error(\"Button content must be 20 characters or less\");\n        if (sections.length > 1 && !sections.every((obj) => !!obj.title))\n            throw new Error(\n                \"All sections must have a title if more than 1 section is provided\"\n            );\n\n        this.button = button;\n        this.sections = sections;\n    }\n}\n\n/**\n * Section API object\n *\n * @group Interactive\n */\nexport class ListSection extends Section<Row, 10> {\n    /**\n     * The rows of the section\n     */\n    readonly rows: Row[];\n\n    /**\n     * Builds a list section component for ActionList\n     *\n     * @param title - Title of the section, only required if there are more than one section\n     * @param rows - Rows of the list section\n     * @throws If title is over 24 characters if provided\n     * @throws If more than 10 rows are provided\n     */\n    constructor(title: string | undefined, ...rows: AtLeastOne<Row>) {\n        super(\"ListSection\", \"rows\", rows, 10, title);\n        this.rows = rows;\n    }\n}\n\n/**\n * Row API object\n *\n * @group Interactive\n */\nexport class Row {\n    /**\n     * The id of the row\n     */\n    readonly id: string;\n    /**\n     * The title of the row\n     */\n    readonly title: string;\n    /**\n     * The description of the row\n     */\n    readonly description?: string;\n\n    /**\n     * Builds a row component for a ListSection\n     *\n     * @param id - The id of the row. Maximum length: 200 characters.\n     * @param title - The title of the row. Maximum length: 24 characters.\n     * @param description - The description of the row. Maximum length: 72 characters.\n     * @throws If id is over 200 characters\n     * @throws If title is over 24 characters\n     * @throws If description is over 72 characters\n     */\n    constructor(id: string, title: string, description?: string) {\n        if (id.length > 200)\n            throw new Error(\"Row id must be 200 characters or less\");\n        if (title.length > 24)\n            throw new Error(\"Row title must be 24 characters or less\");\n        if (description && description.length > 72)\n            throw new Error(\"Row description must be 72 characters or less\");\n\n        this.id = id;\n        this.title = title;\n        if (description) this.description = description;\n    }\n}\n\n/**\n * Action API object\n *\n * @group Interactive\n */\nexport class ActionCatalog implements InteractiveAction {\n    /**\n     * The name of the component\n     */\n    readonly name: \"catalog_message\";\n    /**\n     * The thumbnail product to be shown in the catalog\n     */\n    readonly parameters?: {\n        thumbnail_product_retailer_id?: string;\n    };\n\n    /**\n     * @override\n     * @internal\n     */\n    get _type(): \"catalog_message\" {\n        return \"catalog_message\";\n    }\n\n    /**\n     * Builds a catalog component for an Interactive message\n     *\n     * @remarks\n     * Seems like the API throws an error if you try to send a catalog\n     * message without a thumbnail, but the signature will keep the\n     * optional parameter in case WhatsApp decides to make their API\n     * work as expected :)\n     *\n     * @param thumbnail - The thumbnail product to be shown in the catalog. If not provided, the first product will be used (or so says the docs, but it doesn't work).\n     */\n    constructor(thumbnail?: Product) {\n        this.name = \"catalog_message\";\n        if (thumbnail) {\n            this.parameters = {\n                thumbnail_product_retailer_id: thumbnail.product_retailer_id\n            };\n        }\n    }\n}\n\n/**\n * Action API object\n *\n * @group Interactive\n */\nexport class ActionProduct implements InteractiveAction {\n    /**\n     * The id of the catalog from where to get the products\n     */\n    readonly catalog_id: string;\n    /**\n     * The product to be added to the catalog\n     */\n    readonly product_retailer_id?: string;\n    /**\n     * The section to be added to the catalog\n     */\n    readonly sections?: ProductSection[];\n\n    /**\n     * @override\n     * @internal\n     */\n    get _type(): \"product\" | \"product_list\" {\n        return this.product_retailer_id ? \"product\" : \"product_list\";\n    }\n\n    /**\n     * Builds a Multi or Single Product component for an Interactive message\n     *\n     * @param catalog_id - The catalog id\n     * @param products - The products to add to the catalog. It can be a _single_ Product object, or a list of ProductSections.\n     * @throws If products is a product list and more than 10 sections are provided\n     * @throws If products is a product list with more than 1 section and at least one section is missing a title\n     */\n    constructor(\n        catalog_id: string,\n        ...products: [Product] | AtLeastOne<ProductSection>\n    ) {\n        const is_sections = isProductSections(products);\n\n        if (is_sections) {\n            if (products.length > 1) {\n                if (products.length > 10)\n                    throw new Error(\n                        \"Catalog must have between 1 and 10 product sections\"\n                    );\n                for (const obj of products) {\n                    if (!obj.title) {\n                        throw new Error(\n                            \"All sections must have a title if more than 1 section is provided\"\n                        );\n                    }\n                }\n            }\n        }\n\n        this.catalog_id = catalog_id;\n\n        if (is_sections) this.sections = products;\n        else this.product_retailer_id = products[0].product_retailer_id;\n    }\n}\n\n/**\n * Action API object\n *\n * @group Interactive\n */\nexport class ActionCTA implements InteractiveAction {\n    /**\n     * The name of the component\n     */\n    readonly name = \"cta_url\";\n    /**\n     * The CTA parameters\n     */\n    readonly parameters?: {\n        display_text: string;\n        url: string;\n    };\n\n    /**\n     * @override\n     * @internal\n     */\n    get _type(): \"cta_url\" {\n        return \"cta_url\";\n    }\n\n    /**\n     * Builds a call-to-action component for an Interactive message\n     *\n     * @param display_text - The text to be displayed in the CTA button\n     * @param url - The url to be opened when the CTA button is clicked\n     */\n    constructor(display_text: string, url: string) {\n        this.parameters = {\n            display_text,\n            url\n        };\n    }\n}\n"],
  "mappings": "AAAA,OACI,cACA,8BACA,YAEG,cAKP,OAAkC,sBAAyB,eAOpD,MAAM,oBAAoB,aAAc,CAIlC,OAIA,KAIA,OAIA,OAKA,KAMT,IAAI,OAAuB,CACvB,MAAO,aACX,CAcA,YACI,OACA,KACA,OACA,OACF,CAGE,GAFA,MAAM,EAEF,OAAO,QAAU,WAAa,CAAC,KAC/B,MAAM,IAAI,MAAM,wCAAwC,EAC5D,GAAI,OAAO,QAAU,WAAa,OAC9B,MAAM,IAAI,MACN,4EACJ,EACJ,GAAI,OAAO,QAAU,gBAAkB,QAAQ,OAAS,OACpD,MAAM,IAAI,MACN,2EACJ,EACJ,GAAI,QAAU,OAAO,QAAU,UAAY,QAAQ,OAAS,OACxD,MAAM,IAAI,MAAM,yCAAyC,EAE7D,KAAK,KAAO,OAAO,MAEnB,KAAK,OAAS,OACV,OAAM,KAAK,KAAO,MAClB,SAAQ,KAAK,OAAS,QACtB,SAAQ,KAAK,OAAS,OAC9B,CACJ,CAOO,MAAM,IAAK,CAIL,KAQT,YAAY,KAAc,CACtB,GAAI,KAAK,OAAS,KACd,MAAM,IAAI,MAAM,6CAA6C,EAEjE,KAAK,KAAO,IAChB,CACJ,CAOO,MAAM,MAAO,CAIP,KAQT,YAAY,KAAc,CACtB,GAAI,KAAK,OAAS,GACd,MAAM,IAAI,MAAM,2CAA2C,EAE/D,KAAK,KAAO,IAChB,CACJ,CAOO,MAAM,MAAO,CAIP,KAIA,KAIA,MAIA,SAIA,MAST,YAAY,OAA2C,CAEnD,GAAI,OAAO,QAAW,SAAU,CAC5B,GAAI,OAAO,OAAS,GAChB,MAAM,IAAI,MAAM,2CAA2C,EAE/D,KAAK,KAAO,MAChB,SACI,KAAK,KAAO,OAAO,MACf,OAAO,QACP,MAAM,IAAI,MAAM,UAAU,KAAK,IAAI,0BAA0B,EAKrE,KAAK,KAAK,IAAI,EAAI,MACtB,CACJ,CAOO,MAAM,sBACD,6BAEZ,CAIa,QAMT,IAAI,OAAkB,CAClB,MAAO,QACX,CAUA,eAAe,OAA4B,CACvC,MAAM,gBAAiB,SAAU,OAAQ,CAAC,EAG1C,MAAM,IAAM,OAAO,IAAK,GAAM,EAAE,EAAE,IAAI,EAAE,EAAE,EAC1C,GAAI,IAAI,SAAW,IAAI,IAAI,GAAG,EAAE,KAC5B,MAAM,IAAI,MAAM,oCAAoC,EAGxD,MAAM,OAAS,OAAO,IAAK,GAAM,EAAE,EAAE,IAAI,EAAE,KAAK,EAChD,GAAI,OAAO,SAAW,IAAI,IAAI,MAAM,EAAE,KAClC,MAAM,IAAI,MAAM,uCAAuC,EAE3D,KAAK,QAAU,MACnB,CACJ,CAOO,MAAM,MAAO,CAIP,KAIA,MAqBT,YAAY,GAAY,MAAe,CACnC,GAAI,GAAG,OAAS,IACZ,MAAM,IAAI,MAAM,0CAA0C,EAC9D,GAAI,QAAQ,KAAK,EAAE,EACf,MAAM,IAAI,MAAM,kDAAkD,EACtE,GAAI,CAAC,MAAM,OACP,MAAM,IAAI,MAAM,wCAAwC,EAC5D,GAAI,MAAM,OAAS,GACf,MAAM,IAAI,MAAM,4CAA4C,EAEhE,KAAK,KAAO,QACZ,KAAK,MAAQ,CACT,MACA,EACJ,CACJ,CACJ,CAOO,MAAM,mBACD,6BAEZ,CAIa,OAIA,SAMT,IAAI,OAAgB,CAChB,MAAO,MACX,CAaA,YAAY,UAAmB,SAAmC,CAG9D,GAFA,MAAM,SAAU,WAAY,SAAU,EAAE,EAEpC,CAAC,OAAO,OACR,MAAM,IAAI,MAAM,0CAA0C,EAC9D,GAAI,OAAO,OAAS,GAChB,MAAM,IAAI,MAAM,8CAA8C,EAClE,GAAI,SAAS,OAAS,GAAK,CAAC,SAAS,MAAO,KAAQ,CAAC,CAAC,IAAI,KAAK,EAC3D,MAAM,IAAI,MACN,mEACJ,EAEJ,KAAK,OAAS,OACd,KAAK,SAAW,QACpB,CACJ,CAOO,MAAM,oBAAoB,OAAiB,CAIrC,KAUT,YAAY,SAA8B,KAAuB,CAC7D,MAAM,cAAe,OAAQ,KAAM,GAAI,KAAK,EAC5C,KAAK,KAAO,IAChB,CACJ,CAOO,MAAM,GAAI,CAIJ,GAIA,MAIA,YAYT,YAAY,GAAY,MAAe,YAAsB,CACzD,GAAI,GAAG,OAAS,IACZ,MAAM,IAAI,MAAM,uCAAuC,EAC3D,GAAI,MAAM,OAAS,GACf,MAAM,IAAI,MAAM,yCAAyC,EAC7D,GAAI,aAAe,YAAY,OAAS,GACpC,MAAM,IAAI,MAAM,+CAA+C,EAEnE,KAAK,GAAK,GACV,KAAK,MAAQ,MACT,cAAa,KAAK,YAAc,YACxC,CACJ,CAOO,MAAM,aAA2C,CAI3C,KAIA,WAQT,IAAI,OAA2B,CAC3B,MAAO,iBACX,CAaA,YAAY,UAAqB,CAC7B,KAAK,KAAO,kBACR,YACA,KAAK,WAAa,CACd,8BAA+B,UAAU,mBAC7C,EAER,CACJ,CAOO,MAAM,aAA2C,CAI3C,WAIA,oBAIA,SAMT,IAAI,OAAoC,CACpC,OAAO,KAAK,oBAAsB,UAAY,cAClD,CAUA,YACI,cACG,SACL,CACE,MAAM,YAAc,kBAAkB,QAAQ,EAE9C,GAAI,aACI,SAAS,OAAS,EAAG,CACrB,GAAI,SAAS,OAAS,GAClB,MAAM,IAAI,MACN,qDACJ,EACJ,UAAW,OAAO,SACd,GAAI,CAAC,IAAI,MACL,MAAM,IAAI,MACN,mEACJ,CAGZ,CAGJ,KAAK,WAAa,WAEd,YAAa,KAAK,SAAW,SAC5B,KAAK,oBAAsB,SAAS,CAAC,EAAE,mBAChD,CACJ,CAOO,MAAM,SAAuC,CAIvC,KAAO,UAIP,WAST,IAAI,OAAmB,CACnB,MAAO,SACX,CAQA,YAAY,aAAsB,IAAa,CAC3C,KAAK,WAAa,CACd,aACA,GACJ,CACJ,CACJ",
  "names": []
}
