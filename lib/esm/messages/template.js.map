{
  "version": 3,
  "sources": ["../../../src/messages/template.ts"],
  "sourcesContent": ["import {\n    ClientMessage,\n    ClientLimitedMessageComponent,\n    type ClientBuildableMessageComponent,\n    type ClientTypedMessageComponent,\n    type TemplateComponent\n} from \"../types.js\";\nimport type { AtLeastOne, XOR } from \"../utils\";\n\nimport type { Location } from \"./location\";\nimport type { Document, Image, Video } from \"./media\";\n\nimport { CatalogProduct, Product, ProductSection } from \"./globals.js\";\n\n/**\n * @group Template\n */\nexport type ButtonParameter = {\n    /**\n     * The type of the button\n     */\n    readonly type: \"text\" | \"payload\" | \"action\" | \"coupon_code\";\n    /**\n     * The text of the button\n     */\n    readonly text?: string;\n    /**\n     * The payload of the button\n     */\n    readonly payload?: string;\n    /**\n     * The coupon's code of the button\n     */\n    readonly coupon_code?: string;\n    /**\n     * The action of the button\n     */\n    readonly action?: XOR<\n        {\n            thumbnail_product_retailer_id: string;\n            sections?: AtLeastOne<ProductSection>;\n        },\n        {\n            flow_token: string;\n            flow_action_data: unknown;\n        }\n    >;\n};\n\n/**\n * This type is used as a C struct pointer for the _build method\n *\n * @internal\n */\ntype BuildingPointers = {\n    theres_only_body: boolean;\n    button_counter: number;\n};\n\n/**\n * Template API object\n *\n * @group Template\n */\nexport class Template extends ClientMessage {\n    /**\n     * The name of the template\n     */\n    readonly name: string;\n    /**\n     * The language of the template\n     */\n    readonly language: Language;\n    /**\n     * The components of the template\n     */\n    readonly components?: Array<NonNullable<TemplateComponent>>;\n\n    /**\n     * @override\n     * @internal\n     */\n    get _type(): \"template\" {\n        return \"template\";\n    }\n\n    /**\n     * Create a Template object for the API\n     *\n     * @example\n     * ```ts\n     * import {\n     *     Template,\n     *     HeaderComponent,\n     *     HeaderParameter,\n     *     BodyComponent,\n     *     BodyParameter,\n     *     Currency,\n     *     DateTime\n     * } from \"whatsapp-api-js/messages\";\n     *\n     * const template_variables_message = new Template(\n     *     \"template_name\",\n     *     \"en\",\n     *     new HeaderComponent(\n     *         new HeaderParameter(\"Hello\"),\n     *         new HeaderParameter(new Currency(1.5 * 1000, \"USD\", \"U$1.5\")),\n     *         new HeaderParameter(new DateTime(\"01/01/2023\"))\n     *     ),\n     *     new BodyComponent(\n     *         new BodyParameter(\"Hello\"),\n     *         new BodyParameter(new Currency(1.5 * 1000, \"USD\", \"U$1.5\")),\n     *         new BodyParameter(new DateTime(\"01/01/2023\"))\n     *     )\n     * );\n     * ```\n     *\n     * @param name - Name of the template\n     * @param language - The code of the language or locale to use. Accepts both language and language_locale formats (e.g., en and en_US).\n     * @param components - Components objects containing the parameters of the message. For text-based templates, the only supported component is {@link BodyComponent}.\n     * @throws If the template isn't text-based (only one {@link BodyComponent} is given) and one of the parameters is a string and it's over 1024 characters.\n     */\n    constructor(\n        name: string,\n        language: string | Language,\n        ...components: TemplateComponent[]\n    ) {\n        super();\n        this.name = name;\n        this.language =\n            typeof language === \"string\" ? new Language(language) : language;\n        if (components.length) {\n            const pointers = {\n                theres_only_body:\n                    components.length === 1 &&\n                    components[0] instanceof BodyComponent,\n                button_counter: 0\n            };\n            this.components = components\n                .map((cmpt) => cmpt._build(pointers))\n                .filter((e) => !!e) as NonNullable<TemplateComponent>[];\n        }\n    }\n\n    /**\n     * OTP Template generator\n     *\n     * @example\n     * ```ts\n     * import { Template } from \"whatsapp-api-js/messages\";\n     *\n     * const template_otp_message = Template.OTP(\"template_name\", \"en\", \"123456\");\n     * ```\n     *\n     * @param name - Name of the template\n     * @param language - The code of the language or locale to use. Accepts both language and language_locale formats (e.g., en and en_US).\n     * @param code - The one time password to be sent\n     * @returns A Template object for the API\n     */\n    static OTP(\n        name: string,\n        language: string | Language,\n        code: string\n    ): Template {\n        return new Template(\n            name,\n            language,\n            new BodyComponent(new BodyParameter(code)),\n            new URLComponent(code)\n        );\n    }\n}\n\n/**\n * Language API object\n *\n * @group Template\n */\nexport class Language {\n    /**\n     * The code of the language or locale to use. Accepts both language and language_locale formats (e.g., en and en_US).\n     */\n    readonly code: string;\n    /**\n     * The language policy\n     */\n    readonly policy: \"deterministic\";\n\n    /**\n     * Create a Language component for a Template message\n     *\n     * @param code - The code of the language or locale to use. Accepts both language and language_locale formats (e.g., en and en_US).\n     * @param policy - The language policy the message should follow. The only supported option is 'deterministic'.\n     */\n    constructor(code: string, policy: \"deterministic\" = \"deterministic\") {\n        this.policy = policy;\n        this.code = code;\n    }\n}\n\n/**\n * Currency API object\n *\n * @group Template\n */\nexport class Currency implements ClientTypedMessageComponent {\n    /**\n     * The amount of the currency by 1000\n     */\n    readonly amount_1000: number;\n    /**\n     * The currency code\n     */\n    readonly code: string;\n    /**\n     * The fallback value\n     */\n    readonly fallback_value: string;\n\n    /**\n     * @override\n     * @internal\n     */\n    get _type(): \"currency\" {\n        return \"currency\";\n    }\n\n    /**\n     * Builds a currency object for a Parameter\n     *\n     * @param amount_1000 - Amount multiplied by 1000\n     * @param code - Currency code as defined in ISO 4217\n     * @param fallback_value - Default text if localization fails\n     * @throws If amount_1000 is not greater than 0\n     */\n    constructor(amount_1000: number, code: string, fallback_value: string) {\n        if (amount_1000 <= 0)\n            throw new Error(\"Currency must have an amount_1000 greater than 0\");\n\n        this.amount_1000 = amount_1000;\n        this.code = code;\n        this.fallback_value = fallback_value;\n    }\n}\n\n/**\n * DateTime API object\n *\n * @group Template\n */\nexport class DateTime implements ClientTypedMessageComponent {\n    /**\n     * The fallback value\n     */\n    readonly fallback_value: string;\n\n    /**\n     * @override\n     * @internal\n     */\n    get _type(): \"date_time\" {\n        return \"date_time\";\n    }\n\n    /**\n     * Builds a date_time object for a Parameter\n     *\n     * @param fallback_value - Default text. For Cloud API, we always use the fallback value, and we do not attempt to localize using other optional fields.\n     */\n    constructor(fallback_value: string) {\n        this.fallback_value = fallback_value;\n    }\n}\n\n/**\n * Components API object\n *\n * @see {@link URLComponent}\n * @see {@link PayloadComponent}\n * @see {@link CatalogComponent}\n * @see {@link MPMComponent}\n * @see {@link CopyComponent}\n * @see {@link SkipButtonComponent}\n *\n * @group Template\n */\nexport abstract class ButtonComponent implements TemplateComponent {\n    /**\n     * The type of the component\n     */\n    readonly type = \"button\";\n    /**\n     * The subtype of the component\n     */\n    readonly sub_type:\n        | \"url\"\n        | \"quick_reply\"\n        | \"catalog\"\n        | \"mpm\"\n        | \"copy_code\"\n        | \"flow\";\n    /**\n     * The parameter of the component\n     */\n    readonly parameters: [ButtonParameter];\n    /**\n     * The index of the component (assigned after calling _build)\n     */\n    protected index = NaN;\n\n    /**\n     * Builds a button component for a Template message.\n     * The index of each component is defined by the order they are sent to the Template's constructor.\n     *\n     * @internal\n     * @param sub_type - The type of button component to create.\n     * @param parameter - The parameter for the component. The index of each component is defined by the order they are sent to the Template's constructor.\n     */\n    constructor(\n        sub_type: ButtonComponent[\"sub_type\"],\n        parameter: ButtonParameter\n    ) {\n        this.sub_type = sub_type;\n        this.parameters = [parameter];\n    }\n\n    /**\n     * @override\n     * @internal\n     */\n    _build(pointers: BuildingPointers): this {\n        this.index = pointers.button_counter++;\n        return this;\n    }\n}\n\n/**\n * Button Component API object for call to action buttons\n *\n * @group Template\n */\nexport class URLComponent extends ButtonComponent {\n    /**\n     * Creates a button component for a Template message with call to action buttons.\n     *\n     * @param parameter - The variable for the url button.\n     * @throws If parameter is an empty string.\n     */\n    constructor(parameter: string) {\n        super(\"url\", new URLComponent.Button(parameter));\n    }\n\n    /**\n     * @internal\n     */\n    private static Button = class implements ButtonParameter {\n        readonly type = \"text\";\n        readonly text: string;\n\n        /**\n         * Creates a parameter for a Template message with call to action buttons.\n         *\n         * @param text - The text of the button\n         * @throws If text is an empty string\n         */\n        constructor(text: string) {\n            if (!text.length) {\n                throw new Error(\"Button parameter can't be an empty string\");\n            }\n\n            this.text = text;\n        }\n    };\n}\n\n/**\n * Button Component API object for quick reply buttons\n *\n * @group Template\n */\nexport class PayloadComponent extends ButtonComponent {\n    /**\n     * Creates a button component for a Template message with quick reply buttons.\n     *\n     * @param parameter - Parameter for the component.\n     * @throws If parameter is an empty string.\n     */\n    constructor(parameter: string) {\n        super(\"quick_reply\", new PayloadComponent.Button(parameter));\n    }\n\n    /**\n     * @internal\n     */\n    private static Button = class implements ButtonParameter {\n        readonly type = \"payload\";\n        readonly payload: string;\n\n        /**\n         * Creates a parameter for a Template message with quick reply buttons.\n         *\n         * @param payload - The id of the button.\n         * @throws If payload is an empty string.\n         */\n        constructor(payload: string) {\n            if (!payload.length) {\n                throw new Error(\"Button parameter can't be an empty string\");\n            }\n\n            this.payload = payload;\n        }\n    };\n}\n\n/**\n * Button Component API object for catalog button\n *\n * @group Template\n */\nexport class CatalogComponent extends ButtonComponent {\n    /**\n     * Creates a button component for a Template catalog button.\n     *\n     * @param thumbnail - The product to use as thumbnail.\n     */\n    constructor(thumbnail: Product) {\n        super(\"catalog\", new CatalogComponent.Action(thumbnail));\n    }\n\n    /**\n     * @internal\n     */\n    private static Action = class implements ButtonParameter {\n        readonly type = \"action\";\n        readonly action: {\n            thumbnail_product_retailer_id: string;\n        };\n\n        /**\n         * Creates a parameter for a Template message with a catalog button.\n         *\n         * @param thumbnail - The product to use as thumbnail.\n         */\n        constructor(thumbnail: Product) {\n            this.action = {\n                thumbnail_product_retailer_id: thumbnail.product_retailer_id\n            };\n        }\n    };\n}\n\n/**\n * Button Component API object for Multi-Product Message\n *\n * @group Template\n */\nexport class MPMComponent extends ButtonComponent {\n    /**\n     * Creates a button component for a MPM Template.\n     *\n     * @param thumbnail - The product to use as thumbnail.\n     * @param sections - The sections of the MPM. Must have between 1 and 10 sections. Must have less than 30 products *across* all sections.\n     * @throws If sections is over 10 elements.\n     * @throws If sections is over 1 element and one of the sections doesn't have a title.\n     */\n    constructor(thumbnail: Product, ...sections: AtLeastOne<ProductSection>) {\n        super(\"mpm\", new MPMComponent.Action(thumbnail, sections));\n    }\n\n    /**\n     * @internal\n     */\n    private static Action = class\n        extends ClientLimitedMessageComponent<ProductSection, 10>\n        implements ButtonParameter\n    {\n        readonly type = \"action\";\n        readonly action: {\n            thumbnail_product_retailer_id: string;\n            sections: AtLeastOne<ProductSection>;\n        };\n\n        /**\n         * Creates a parameter for a MPM Template.\n         *\n         * @param thumbnail - The product to use as thumbnail.\n         * @param sections - The sections of the MPM. Must have between 1 and 10 sections.\n         * @throws If sections is over 10 elements.\n         * @throws If sections is over 1 element and one of the sections doesn't have a title.\n         */\n        constructor(thumbnail: Product, sections: AtLeastOne<ProductSection>) {\n            super(\"MPMComponent\", \"sections\", sections, 10);\n\n            // TODO: Idk if this rule applies here.\n            if (sections.length > 1) {\n                if (!sections.every((s) => !!s.title)) {\n                    throw new Error(\n                        \"All sections must have a title if more than 1 section is provided\"\n                    );\n                }\n            }\n\n            this.action = {\n                thumbnail_product_retailer_id: thumbnail.product_retailer_id,\n                sections\n            };\n        }\n    };\n}\n\n/**\n * Button Component API object for copy coupon button\n *\n * @group Template\n */\nexport class CopyComponent extends ButtonComponent {\n    /**\n     * Creates a button component for a Template message with copy coupon button.\n     *\n     * @param parameter - The coupon's code of the button to copy.\n     * @throws If parameter is an empty string.\n     */\n    constructor(parameter: string) {\n        super(\"copy_code\", new CopyComponent.Action(parameter));\n    }\n\n    /**\n     * @internal\n     */\n    private static Action = class implements ButtonParameter {\n        readonly type = \"coupon_code\";\n        readonly coupon_code: string;\n\n        /**\n         * Creates a parameter for a Template message with copy coupon button.\n         *\n         * @param coupon_code - The coupon's code of the button.\n         * @throws If coupon_code is an empty string.\n         */\n        constructor(coupon_code: string) {\n            if (!coupon_code.length) {\n                throw new Error(\"Action coupon_code can't be an empty string\");\n            }\n\n            this.coupon_code = coupon_code;\n        }\n    };\n}\n\n/**\n * Button Component API object for flow button\n *\n * @group Template\n */\nexport class FlowComponent extends ButtonComponent {\n    /**\n     * Creates a button component for a Template message with flow button.\n     *\n     * @param flow_token - Honestly, I don't know what this is, the documentation only says this might be \"FLOW_TOKEN\" and defaults to \"unused\".\n     * @param flow_action_data - JSON object with the data payload for the first screen.\n     */\n    constructor(flow_token: string, flow_action_data: unknown) {\n        super(\"flow\", new FlowComponent.Action(flow_token, flow_action_data));\n    }\n\n    /**\n     * @internal\n     */\n    private static Action = class implements ButtonParameter {\n        readonly type = \"action\";\n        readonly action: {\n            flow_token: string;\n            flow_action_data: unknown;\n        };\n\n        /**\n         * Creates a parameter for a Template message with flow button.\n         *\n         * @param flow_token - Idk, some string.\n         * @param flow_action_data - JSON object with the data payload for the first screen.\n         */\n        constructor(flow_token: string, flow_action_data: unknown) {\n            this.action = {\n                flow_token,\n                flow_action_data\n            };\n        }\n    };\n}\n\n/**\n * (Fake) Button Component API object for skipping buttons that don't require a parameter (such as phone number buttons)\n *\n * @group Template\n */\nexport class SkipButtonComponent extends ButtonComponent {\n    /**\n     * Skips a button component index for a Template message.\n     */\n    constructor() {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore - This is a fake button component, no need to pass parameters\n        super();\n    }\n\n    /**\n     * @override\n     * @internal\n     */\n    _build(pointers: BuildingPointers): this {\n        pointers.button_counter++;\n        return null as unknown as this;\n    }\n}\n\n/**\n * Components API object\n *\n * @group Template\n */\nexport class HeaderComponent implements TemplateComponent {\n    /**\n     * The type of the component\n     */\n    readonly type: \"header\";\n    /**\n     * The parameters of the component\n     */\n    readonly parameters: HeaderParameter[];\n\n    /**\n     * Builds a header component for a Template message\n     *\n     * @param parameters - Parameters of the body component\n     */\n    constructor(...parameters: AtLeastOne<HeaderParameter>) {\n        this.type = \"header\";\n        this.parameters = parameters;\n    }\n\n    /**\n     * @override\n     * @internal\n     */\n    _build(): this {\n        return this;\n    }\n}\n\n/**\n * Parameter API object\n *\n * @group Template\n */\nexport class HeaderParameter {\n    /**\n     * The type of the parameter\n     */\n    readonly type:\n        | \"text\"\n        | \"currency\"\n        | \"date_time\"\n        | \"image\"\n        | \"document\"\n        | \"video\"\n        | \"location\"\n        | \"product\";\n    /**\n     * The text of the parameter\n     */\n    readonly text?: string;\n    /**\n     * The currency of the parameter\n     */\n    readonly currency?: Currency;\n    /**\n     * The datetime of the parameter\n     */\n    readonly date_time?: DateTime;\n    /**\n     * The image of the parameter\n     */\n    readonly image?: Image;\n    /**\n     * The document of the parameter\n     */\n    readonly document?: Document;\n    /**\n     * The video of the parameter\n     */\n    readonly video?: Video;\n    /**\n     * The location of the parameter\n     */\n    readonly location?: Location;\n    /**\n     * The product of the parameter\n     */\n    readonly product?: CatalogProduct;\n\n    /**\n     * Builds a parameter object for a HeaderComponent.\n     * For text parameter, the character limit is 60.\n     * For Document parameter, only PDF documents are supported for document-based message templates (not checked).\n     * For Location parameter, the location must have a name and address.\n     *\n     * @param parameter - The parameter to be used in the template's header\n     * @throws If parameter is a string and it's over 60 characters\n     * @throws If parameter is a Location and it doesn't have a name and address\n     */\n    constructor(\n        parameter:\n            | string\n            | Currency\n            | DateTime\n            | Image\n            | Document\n            | Video\n            | Location\n            | CatalogProduct\n    ) {\n        if (typeof parameter === \"string\") {\n            if (parameter.length > 60)\n                throw new Error(\"Header text must be 60 characters or less\");\n\n            this.type = \"text\";\n        } else {\n            if (\n                parameter._type === \"location\" &&\n                !(parameter.name && parameter.address)\n            ) {\n                throw new Error(\"Header location must have a name and address\");\n            }\n\n            this.type = parameter._type;\n        }\n\n        Object.defineProperty(this, this.type, {\n            value: parameter,\n            enumerable: true\n        });\n    }\n}\n\n/**\n * Components API object\n *\n * @group Template\n */\nexport class BodyComponent implements TemplateComponent {\n    /**\n     * The type of the component\n     */\n    readonly type: \"body\";\n    /**\n     * The parameters of the component\n     */\n    readonly parameters: BodyParameter[];\n\n    /**\n     * Builds a body component for a Template message\n     *\n     * @param parameters - Parameters of the body component\n     */\n    constructor(...parameters: AtLeastOne<BodyParameter>) {\n        this.type = \"body\";\n        this.parameters = parameters;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @throws If theres_only_body is false and one of the parameters is a string and it's over 1024 characters\n     */\n    _build({ theres_only_body }: BuildingPointers): this {\n        // If it needs to check for the shorter max text length\n        if (!theres_only_body) {\n            for (const param of this.parameters) {\n                if (param.text && param.text?.length > 1024) {\n                    throw new Error(\n                        \"Body text must be 1024 characters or less\"\n                    );\n                }\n            }\n        }\n\n        return this;\n    }\n}\n\n/**\n * Parameter API object\n *\n * @group Template\n */\nexport class BodyParameter {\n    /**\n     * The type of the parameter\n     */\n    readonly type: \"text\" | \"currency\" | \"date_time\";\n    /**\n     * The text of the parameter\n     */\n    readonly text?: string;\n    /**\n     * The currency of the parameter\n     */\n    readonly currency?: Currency;\n    /**\n     * The datetime of the parameter\n     */\n    readonly date_time?: DateTime;\n\n    /**\n     * Builds a parameter object for a BodyComponent.\n     * For text parameter, the character limit is 32768 if only one BodyComponent is used for the Template, else it's 1024.\n     *\n     * @param parameter - The parameter to be used in the template\n     * @throws If parameter is a string and it's over 32768 characters\n     * @throws If parameter is a string, there are other components in the Template and it's over 1024 characters\n     * @see {@link BodyComponent._build} The method that checks the 1024 character limit\n     */\n    constructor(parameter: string | Currency | DateTime) {\n        if (typeof parameter === \"string\") {\n            // Check the upper limit of the string length here\n            // If a shorter one is needed, check and throw an\n            // error on the build method of BodyComponent\n            if (parameter.length > 32_768)\n                throw new Error(\"Body text must be 32768 characters or less\");\n\n            this.type = \"text\";\n        } else {\n            this.type = parameter._type;\n        }\n\n        Object.defineProperty(this, this.type, {\n            value: parameter,\n            enumerable: true\n        });\n    }\n}\n\n/**\n * Components API object\n *\n * @group Template\n */\nexport class CarouselComponent\n    extends ClientLimitedMessageComponent<CarouselCard, 10>\n    implements TemplateComponent\n{\n    /**\n     * The type of the component\n     */\n    readonly type = \"carousel\";\n    /**\n     * The cards of the component\n     */\n    readonly cards: CarouselCard[];\n\n    /**\n     * Builds a carousel component for a Template message\n     *\n     * @param cards - The cards of the component\n     * @throws If cards is over 10 elements\n     */\n    constructor(...cards: AtLeastOne<CarouselCard>) {\n        super(\"CarouselComponent\", \"CarouselCard\", cards, 10);\n\n        const pointers = {\n            counter: 0\n        };\n\n        this.cards = cards.map((cmpt) => cmpt._build(pointers));\n    }\n\n    /**\n     * @override\n     * @internal\n     */\n    _build(): this {\n        return this;\n    }\n}\n\n/**\n * Card API object\n *\n * @group Template\n */\nexport class CarouselCard implements ClientBuildableMessageComponent {\n    /**\n     * The index of the card (assigned after calling _build)\n     */\n    protected card_index = NaN;\n    /**\n     * The components of the card\n     */\n    readonly components: NonNullable<\n        HeaderComponent | BodyComponent | ButtonComponent\n    >[];\n\n    /**\n     * Builds a carousel card for a CarouselComponent.\n     *\n     * @remarks\n     * If this looks odly similar to Template constructor's signature, it's because it is.\n     *\n     * @param header - The header parameter for the card\n     * @param components - The other components for the card\n     */\n    constructor(\n        header: Image | Video | CatalogProduct,\n        ...components: (BodyComponent | ButtonComponent)[]\n    ) {\n        const tmp = new Template(\n            \"\",\n            \"\",\n            new HeaderComponent(new HeaderParameter(header)),\n            ...components\n        );\n\n        this.components = tmp.components as NonNullable<\n            HeaderComponent | BodyComponent | ButtonComponent\n        >[];\n    }\n\n    /**\n     * @override\n     * @internal\n     */\n    _build(ptr: { counter: number }): this {\n        this.card_index = ptr.counter++;\n        return this;\n    }\n}\n\n/**\n * Components API object\n *\n * @group Template\n */\nexport class LTOComponent implements TemplateComponent {\n    /**\n     * The type of the component\n     */\n    readonly type = \"limited_time_offer\";\n    /**\n     * The parameters of the component\n     */\n    readonly parameters: [\n        {\n            type: \"limited_time_offer\";\n            limited_time_offer: {\n                expiration_time_ms: number;\n            };\n        }\n    ];\n\n    /**\n     * Builds a limited-time offer component for a Template message\n     *\n     * @param expiration - Offer code expiration time as a UNIX timestamp in milliseconds\n     * @throws If expiration is negative\n     */\n    constructor(expiration: number) {\n        if (expiration < 0) {\n            throw new Error(\n                \"Expiration time must be a positive Unix timestamp\"\n            );\n        }\n\n        this.parameters = [\n            {\n                type: \"limited_time_offer\",\n                limited_time_offer: {\n                    expiration_time_ms: expiration\n                }\n            }\n        ];\n    }\n\n    /**\n     * @override\n     * @internal\n     */\n    _build(): this {\n        return this;\n    }\n}\n"],
  "mappings": "AAAA;AAAA,EACI;AAAA,EACA;AAAA,OAIG;AA0DA,MAAM,iBAAiB,cAAc;AAAA;AAAA;AAAA;AAAA,EAI/B;AAAA;AAAA;AAAA;AAAA,EAIA;AAAA;AAAA;AAAA;AAAA,EAIA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMT,IAAI,QAAoB;AACpB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsCA,YACI,MACA,aACG,YACL;AACE,UAAM;AACN,SAAK,OAAO;AACZ,SAAK,WACD,OAAO,aAAa,WAAW,IAAI,SAAS,QAAQ,IAAI;AAC5D,QAAI,WAAW,QAAQ;AACnB,YAAM,WAAW;AAAA,QACb,kBACI,WAAW,WAAW,KACtB,WAAW,CAAC,aAAa;AAAA,QAC7B,gBAAgB;AAAA,MACpB;AACA,WAAK,aAAa,WACb,IAAI,CAAC,SAAS,KAAK,OAAO,QAAQ,CAAC,EACnC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;AAAA,IAC1B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,OAAO,IACH,MACA,UACA,MACQ;AACR,WAAO,IAAI;AAAA,MACP;AAAA,MACA;AAAA,MACA,IAAI,cAAc,IAAI,cAAc,IAAI,CAAC;AAAA,MACzC,IAAI,aAAa,IAAI;AAAA,IACzB;AAAA,EACJ;AACJ;AAOO,MAAM,SAAS;AAAA;AAAA;AAAA;AAAA,EAIT;AAAA;AAAA;AAAA;AAAA,EAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQT,YAAY,MAAc,SAA0B,iBAAiB;AACjE,SAAK,SAAS;AACd,SAAK,OAAO;AAAA,EAChB;AACJ;AAOO,MAAM,SAAgD;AAAA;AAAA;AAAA;AAAA,EAIhD;AAAA;AAAA;AAAA;AAAA,EAIA;AAAA;AAAA;AAAA;AAAA,EAIA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMT,IAAI,QAAoB;AACpB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,YAAY,aAAqB,MAAc,gBAAwB;AACnE,QAAI,eAAe;AACf,YAAM,IAAI,MAAM,kDAAkD;AAEtE,SAAK,cAAc;AACnB,SAAK,OAAO;AACZ,SAAK,iBAAiB;AAAA,EAC1B;AACJ;AAOO,MAAM,SAAgD;AAAA;AAAA;AAAA;AAAA,EAIhD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMT,IAAI,QAAqB;AACrB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY,gBAAwB;AAChC,SAAK,iBAAiB;AAAA,EAC1B;AACJ;AAcO,MAAe,gBAA6C;AAAA;AAAA;AAAA;AAAA,EAItD,OAAO;AAAA;AAAA;AAAA;AAAA,EAIP;AAAA;AAAA;AAAA;AAAA,EAUA;AAAA;AAAA;AAAA;AAAA,EAIC,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUlB,YACI,UACA,WACF;AACE,SAAK,WAAW;AAChB,SAAK,aAAa,CAAC,SAAS;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,UAAkC;AACrC,SAAK,QAAQ,SAAS;AACtB,WAAO;AAAA,EACX;AACJ;AAOO,MAAM,qBAAqB,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO9C,YAAY,WAAmB;AAC3B,UAAM,OAAO,IAAI,aAAa,OAAO,SAAS,CAAC;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA,EAKA,OAAe,SAAS,MAAiC;AAAA,IAC5C,OAAO;AAAA,IACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQT,YAAY,MAAc;AACtB,UAAI,CAAC,KAAK,QAAQ;AACd,cAAM,IAAI,MAAM,2CAA2C;AAAA,MAC/D;AAEA,WAAK,OAAO;AAAA,IAChB;AAAA,EACJ;AACJ;AAOO,MAAM,yBAAyB,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOlD,YAAY,WAAmB;AAC3B,UAAM,eAAe,IAAI,iBAAiB,OAAO,SAAS,CAAC;AAAA,EAC/D;AAAA;AAAA;AAAA;AAAA,EAKA,OAAe,SAAS,MAAiC;AAAA,IAC5C,OAAO;AAAA,IACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQT,YAAY,SAAiB;AACzB,UAAI,CAAC,QAAQ,QAAQ;AACjB,cAAM,IAAI,MAAM,2CAA2C;AAAA,MAC/D;AAEA,WAAK,UAAU;AAAA,IACnB;AAAA,EACJ;AACJ;AAOO,MAAM,yBAAyB,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMlD,YAAY,WAAoB;AAC5B,UAAM,WAAW,IAAI,iBAAiB,OAAO,SAAS,CAAC;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA,EAKA,OAAe,SAAS,MAAiC;AAAA,IAC5C,OAAO;AAAA,IACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAST,YAAY,WAAoB;AAC5B,WAAK,SAAS;AAAA,QACV,+BAA+B,UAAU;AAAA,MAC7C;AAAA,IACJ;AAAA,EACJ;AACJ;AAOO,MAAM,qBAAqB,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAS9C,YAAY,cAAuB,UAAsC;AACrE,UAAM,OAAO,IAAI,aAAa,OAAO,WAAW,QAAQ,CAAC;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA,EAKA,OAAe,SAAS,cACZ,8BAEZ;AAAA,IACa,OAAO;AAAA,IACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAaT,YAAY,WAAoB,UAAsC;AAClE,YAAM,gBAAgB,YAAY,UAAU,EAAE;AAG9C,UAAI,SAAS,SAAS,GAAG;AACrB,YAAI,CAAC,SAAS,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,GAAG;AACnC,gBAAM,IAAI;AAAA,YACN;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAEA,WAAK,SAAS;AAAA,QACV,+BAA+B,UAAU;AAAA,QACzC;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;AAOO,MAAM,sBAAsB,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO/C,YAAY,WAAmB;AAC3B,UAAM,aAAa,IAAI,cAAc,OAAO,SAAS,CAAC;AAAA,EAC1D;AAAA;AAAA;AAAA;AAAA,EAKA,OAAe,SAAS,MAAiC;AAAA,IAC5C,OAAO;AAAA,IACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQT,YAAY,aAAqB;AAC7B,UAAI,CAAC,YAAY,QAAQ;AACrB,cAAM,IAAI,MAAM,6CAA6C;AAAA,MACjE;AAEA,WAAK,cAAc;AAAA,IACvB;AAAA,EACJ;AACJ;AAOO,MAAM,sBAAsB,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO/C,YAAY,YAAoB,kBAA2B;AACvD,UAAM,QAAQ,IAAI,cAAc,OAAO,YAAY,gBAAgB,CAAC;AAAA,EACxE;AAAA;AAAA;AAAA;AAAA,EAKA,OAAe,SAAS,MAAiC;AAAA,IAC5C,OAAO;AAAA,IACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWT,YAAY,YAAoB,kBAA2B;AACvD,WAAK,SAAS;AAAA,QACV;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;AAOO,MAAM,4BAA4B,gBAAgB;AAAA;AAAA;AAAA;AAAA,EAIrD,cAAc;AAGV,UAAM;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,UAAkC;AACrC,aAAS;AACT,WAAO;AAAA,EACX;AACJ;AAOO,MAAM,gBAA6C;AAAA;AAAA;AAAA;AAAA,EAI7C;AAAA;AAAA;AAAA;AAAA,EAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOT,eAAe,YAAyC;AACpD,SAAK,OAAO;AACZ,SAAK,aAAa;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAe;AACX,WAAO;AAAA,EACX;AACJ;AAOO,MAAM,gBAAgB;AAAA;AAAA;AAAA;AAAA,EAIhB;AAAA;AAAA;AAAA;AAAA,EAYA;AAAA;AAAA;AAAA;AAAA,EAIA;AAAA;AAAA;AAAA;AAAA,EAIA;AAAA;AAAA;AAAA;AAAA,EAIA;AAAA;AAAA;AAAA;AAAA,EAIA;AAAA;AAAA;AAAA;AAAA,EAIA;AAAA;AAAA;AAAA;AAAA,EAIA;AAAA;AAAA;AAAA;AAAA,EAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYT,YACI,WASF;AACE,QAAI,OAAO,cAAc,UAAU;AAC/B,UAAI,UAAU,SAAS;AACnB,cAAM,IAAI,MAAM,2CAA2C;AAE/D,WAAK,OAAO;AAAA,IAChB,OAAO;AACH,UACI,UAAU,UAAU,cACpB,EAAE,UAAU,QAAQ,UAAU,UAChC;AACE,cAAM,IAAI,MAAM,8CAA8C;AAAA,MAClE;AAEA,WAAK,OAAO,UAAU;AAAA,IAC1B;AAEA,WAAO,eAAe,MAAM,KAAK,MAAM;AAAA,MACnC,OAAO;AAAA,MACP,YAAY;AAAA,IAChB,CAAC;AAAA,EACL;AACJ;AAOO,MAAM,cAA2C;AAAA;AAAA;AAAA;AAAA,EAI3C;AAAA;AAAA;AAAA;AAAA,EAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOT,eAAe,YAAuC;AAClD,SAAK,OAAO;AACZ,SAAK,aAAa;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,EAAE,iBAAiB,GAA2B;AAEjD,QAAI,CAAC,kBAAkB;AACnB,iBAAW,SAAS,KAAK,YAAY;AACjC,YAAI,MAAM,QAAQ,MAAM,MAAM,SAAS,MAAM;AACzC,gBAAM,IAAI;AAAA,YACN;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AACJ;AAOO,MAAM,cAAc;AAAA;AAAA;AAAA;AAAA,EAId;AAAA;AAAA;AAAA;AAAA,EAIA;AAAA;AAAA;AAAA;AAAA,EAIA;AAAA;AAAA;AAAA;AAAA,EAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWT,YAAY,WAAyC;AACjD,QAAI,OAAO,cAAc,UAAU;AAI/B,UAAI,UAAU,SAAS;AACnB,cAAM,IAAI,MAAM,4CAA4C;AAEhE,WAAK,OAAO;AAAA,IAChB,OAAO;AACH,WAAK,OAAO,UAAU;AAAA,IAC1B;AAEA,WAAO,eAAe,MAAM,KAAK,MAAM;AAAA,MACnC,OAAO;AAAA,MACP,YAAY;AAAA,IAChB,CAAC;AAAA,EACL;AACJ;AAOO,MAAM,0BACD,8BAEZ;AAAA;AAAA;AAAA;AAAA,EAIa,OAAO;AAAA;AAAA;AAAA;AAAA,EAIP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQT,eAAe,OAAiC;AAC5C,UAAM,qBAAqB,gBAAgB,OAAO,EAAE;AAEpD,UAAM,WAAW;AAAA,MACb,SAAS;AAAA,IACb;AAEA,SAAK,QAAQ,MAAM,IAAI,CAAC,SAAS,KAAK,OAAO,QAAQ,CAAC;AAAA,EAC1D;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAe;AACX,WAAO;AAAA,EACX;AACJ;AAOO,MAAM,aAAwD;AAAA;AAAA;AAAA;AAAA,EAIvD,aAAa;AAAA;AAAA;AAAA;AAAA,EAId;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaT,YACI,WACG,YACL;AACE,UAAM,MAAM,IAAI;AAAA,MACZ;AAAA,MACA;AAAA,MACA,IAAI,gBAAgB,IAAI,gBAAgB,MAAM,CAAC;AAAA,MAC/C,GAAG;AAAA,IACP;AAEA,SAAK,aAAa,IAAI;AAAA,EAG1B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,KAAgC;AACnC,SAAK,aAAa,IAAI;AACtB,WAAO;AAAA,EACX;AACJ;AAOO,MAAM,aAA0C;AAAA;AAAA;AAAA;AAAA,EAI1C,OAAO;AAAA;AAAA;AAAA;AAAA,EAIP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeT,YAAY,YAAoB;AAC5B,QAAI,aAAa,GAAG;AAChB,YAAM,IAAI;AAAA,QACN;AAAA,MACJ;AAAA,IACJ;AAEA,SAAK,aAAa;AAAA,MACd;AAAA,QACI,MAAM;AAAA,QACN,oBAAoB;AAAA,UAChB,oBAAoB;AAAA,QACxB;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAe;AACX,WAAO;AAAA,EACX;AACJ;",
  "names": []
}
