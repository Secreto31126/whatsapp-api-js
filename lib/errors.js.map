{
  "version": 3,
  "sources": ["../src/errors.ts"],
  "sourcesContent": ["/**\n * @module errors\n *\n * @description\n * This module contains the custom errors that are thrown by the\n * {@link WhatsAppAPI.get} and {@link WhatsAppAPI.post} methods.\n *\n * I did my best to explain why each error happens, include examples,\n * a few tips, and links to sources for further reading.\n *\n * This file is 300 lines of docs and the remaining is the actual code.\n * So yeah, enjoy reading :]\n */\n\n// This import makes the docs' links work\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport type { WhatsAppAPI } from \"./index\";\n\n/**\n * The library's base exception class.\n */\nexport abstract class WhatsAppAPIError extends Error {\n    /**\n     * The HTTP status code of the error\n     */\n    readonly httpStatus: number;\n\n    /**\n     * @internal\n     */\n    constructor(message: string, httpStatus: number) {\n        super(message);\n        this.name = \"WhatsAppAPIError\";\n        this.httpStatus = httpStatus;\n    }\n\n    protected url(name: string) {\n        return `https://whatsappapijs.web.app/classes/errors.${name}.html`;\n    }\n\n    /**\n     * @returns The URL to the error's documentation\n     */\n    abstract get docs(): string;\n}\n\n/**\n * Thrown when the request body is missing\n *\n * @description\n * In order to validate the request, the raw body (original string) of the request is required to do the signature verification.\n *\n * If you are using a middleware, make sure you aren't consuming the request body before the API can access it.\n * Otherwise, feel free to open an issue on {@link https://github.com/Secreto31126/whatsapp-api-js/issues | GitHub}.\n *\n * @example\n * ```ts\n * await whatsapp.post(JSON.parse(req.body), req.body, req.headers.get(\"x-hub-signature-256\"));\n * ```\n *\n * @see https://whatsappapijs.web.app/classes/WhatsAppAPI.WhatsAppAPI.html#post\n */\nexport class WhatsAppAPIMissingRawBodyError extends WhatsAppAPIError {\n    /**\n     * @internal\n     */\n    constructor() {\n        super(\"Missing raw body\", 400);\n    }\n\n    /**\n     * @override\n     */\n    get docs() {\n        return this.url(\"WhatsAppAPIMissingRawBodyError\");\n    }\n}\n\n/**\n * Thrown when the request's signature is missing\n *\n * @description\n * In order to validate the request, the `x-hub-signature-256` header is required to do the signature verification.\n *\n * If you are NOT using a middleware, make sure you are passing the headers correctly (check case sensitivity).\n * Otherwise, feel free to open an issue on {@link https://github.com/Secreto31126/whatsapp-api-js/issues | GitHub}.\n *\n * @example\n * ```ts\n * await whatsapp.post(JSON.parse(req.body), req.body, req.headers.get(\"x-hub-signature-256\"));\n * ```\n *\n * @see https://whatsappapijs.web.app/classes/WhatsAppAPI.WhatsAppAPI.html#post\n */\nexport class WhatsAppAPIMissingSignatureError extends WhatsAppAPIError {\n    /**\n     * @internal\n     */\n    constructor() {\n        super(\"Missing signature\", 401);\n    }\n\n    /**\n     * @override\n     */\n    get docs() {\n        return this.url(\"WhatsAppAPIMissingSignatureError\");\n    }\n}\n\n/**\n * Thrown when the App Secret isn't provided in the constructor\n *\n * @description\n * The App Secret is a private key that is used to verify the authenticity of the incoming requests.\n * It can be found in your Meta's app dashboard, inside App Settings -\\> Basic.\n *\n * @example\n * ```ts\n * new WhatsAppAPI({\n *     appSecret: \"your-app-secret\",\n *     // other options\n * });\n * ```\n *\n * @see https://whatsappapijs.web.app/types/types.TheBasicConstructorArguments.html\n */\nexport class WhatsAppAPIMissingAppSecretError extends WhatsAppAPIError {\n    /**\n     * @internal\n     */\n    constructor() {\n        super(\"Missing app secret\", 500);\n    }\n\n    /**\n     * @override\n     */\n    get docs() {\n        return this.url(\"WhatsAppAPIMissingAppSecretError\");\n    }\n}\n\n/**\n * Thrown when the `crypto.subtle` API isn't available in the current environment\n *\n * @description\n * The `crypto.subtle` API is required to verify the signature of the incoming requests.\n * However, it isn't available in all environments. If your environment doesn't support it,\n * you can provide a ponyfill for it in the `crypto` option of the `WhatsAppAPI` constructor.\n *\n * @example\n * ```ts\n * new WhatsAppAPI({\n *     appSecret: \"your-app-secret\",\n *     ponyfill: {\n *         subtle: my_custom_crypto.subtle\n *     },\n *     // other options\n * });\n * ```\n *\n * @see https://whatsappapijs.web.app/types/types.TheBasicConstructorArguments.html\n * @see https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto (specifically, `importKey` and `sign` methods)\n */\nexport class WhatsAppAPIMissingCryptoSubtleError extends WhatsAppAPIError {\n    /**\n     * @internal\n     */\n    constructor() {\n        super(\"Missing crypto subtle\", 501);\n    }\n\n    /**\n     * @override\n     */\n    get docs() {\n        return this.url(\"WhatsAppAPIMissingCryptoSubtleError\");\n    }\n}\n\n/**\n * Thrown when the signature provided in the request's headers isn't valid\n *\n * @description\n * The signature provided in the request's headers isn't valid.\n * Either they are hacking you, or your App Secret is invalid.\n *\n * Make sure you provided the correct app secret on initialization.\n * It can be found in your Meta's app dashboard, inside App Settings -\\> Basic.\n *\n * @example\n * ```ts\n * new WhatsAppAPI({\n *     appSecret: \"your-app-secret\",\n *     // other options\n * });\n * ```\n *\n * @description\n * It might also be possible you didn't provide the correct request header\n * for the signature (x-hub-signature-256). If you are using a middleware and\n * this seems to be the case, consider opening an issue on\n * {@link https://github.com/Secreto31126/whatsapp-api-js/issues | GitHub}.\n *\n * \u26A0 If you are just testing the API, you can disable the signature verification\n * by setting the `secure` option to `false` on the `WhatsAppAPI` constructor.\n * Obviously, this is not recommended for production.\n *\n * @example\n * ```ts\n * new WhatsAppAPI({\n *     // appSecret: \"Not required\",\n *     secure: false,\n *     // other options\n * });\n * ```\n *\n * @see https://whatsappapijs.web.app/classes/WhatsAppAPI.WhatsAppAPI.html#post\n * @see https://whatsappapijs.web.app/types/types.TheBasicConstructorArguments.html\n * @see https://developer.mozilla.org/docs/Web/HTTP/Headers\n */\nexport class WhatsAppAPIFailedToVerifyError extends WhatsAppAPIError {\n    /**\n     * @internal\n     */\n    constructor() {\n        super(\"Signature doesn't match\", 401);\n    }\n\n    /**\n     * @override\n     */\n    get docs() {\n        return this.url(\"WhatsAppAPIFailedToVerifyError\");\n    }\n}\n\n/**\n * Thrown when the Webhook Verify Token isn't provided in the constructor\n *\n * @description\n * The Webhook Verify Token is a custom secret key that is used to verify against the API\n * the server is indeed the one that is supposed to receive the incoming requests.\n *\n * Your server will receive a GET request with the `hub.verify_token` and `hub.challenge` parameters.\n * The verify token should be equal to the one you provided in the constructor.\n * Once validated, you should reply with the `hub.challenge` parameter.\n *\n * The verify token is manually generated while setting up the callback URL in the\n * Meta's app dashboard -\\> WhatsApp -\\> Configuration.\n *\n * @example\n * ```ts\n * new WhatsAppAPI({\n *     webhookVerifyToken: \"your-verify-token\",\n *     // other options\n * });\n * ```\n *\n * @see https://whatsappapijs.web.app/types/types.TheBasicConstructorArguments.html\n * @see https://developers.facebook.com/docs/graph-api/webhooks/getting-started/#verification-requests\n */\nexport class WhatsAppAPIMissingVerifyTokenError extends WhatsAppAPIError {\n    /**\n     * @internal\n     */\n    constructor() {\n        super(\"Missing verify token\", 500);\n    }\n\n    /**\n     * @override\n     */\n    get docs() {\n        return this.url(\"WhatsAppAPIMissingVerifyTokenError\");\n    }\n}\n\n/**\n * Thrown when the search parameters are missing in the request\n *\n * @description\n * In order to validate your server against the API, you need to provide the request params.\n *\n * If you are NOT using a middleware, make sure you are passing the parameters correctly.\n * Otherwise, feel free to open an issue on {@link https://github.com/Secreto31126/whatsapp-api-js/issues | GitHub}.\n *\n * @see https://whatsappapijs.web.app/types/types.GetParams.html\n * @see https://developers.facebook.com/docs/graph-api/webhooks/getting-started/#verification-requests\n */\nexport class WhatsAppAPIMissingSearchParamsError extends WhatsAppAPIError {\n    /**\n     * @internal\n     */\n    constructor() {\n        super(\"Missing search params\", 400);\n    }\n\n    /**\n     * @override\n     */\n    get docs() {\n        return this.url(\"WhatsAppAPIMissingSearchParamsError\");\n    }\n}\n\n/**\n * Thrown when the verification token doesn't match from the request\n *\n * @description\n * The verify_token in the request doesn't match the one provided on initialization.\n * Either they are hacking you, or your Webhook Verify Token is invalid.\n *\n * Make sure you provided the correct verify token on initialization.\n * It is manually generated while setting up the callback URL in the\n * Meta's app dashboard -\\> WhatsApp -\\> Configuration.\n *\n * @example\n * ```ts\n * new WhatsAppAPI({\n *     webhookVerifyToken: \"your-verify-token\",\n *     // other options\n * });\n * ```\n *\n * @description\n * It might also be possible you didn't provide the correct request params\n * for the verification token (hub.verify_token). If you are using a middleware and\n * this seems to be the case, consider opening an issue on\n * {@link https://github.com/Secreto31126/whatsapp-api-js/issues | GitHub}.\n *\n * @see https://whatsappapijs.web.app/classes/WhatsAppAPI.WhatsAppAPI.html#get\n * @see https://whatsappapijs.web.app/types/types.TheBasicConstructorArguments.html\n * @see https://whatsappapijs.web.app/types/types.GetParams.html\n * @see https://developers.facebook.com/docs/graph-api/webhooks/getting-started/#verification-requests\n */\nexport class WhatsAppAPIFailedToVerifyTokenError extends WhatsAppAPIError {\n    /**\n     * @internal\n     */\n    constructor() {\n        super(\"Invalid token verification\", 403);\n    }\n\n    /**\n     * @override\n     */\n    get docs() {\n        return this.url(\"WhatsAppAPIFailedToVerifyTokenError\");\n    }\n}\n\n/**\n * Thrown in unusual cases, such as on empty or unknown payloads from the API side.\n *\n * It 100% should never happen, and if it does, feel free to open an issue on\n * {@link https://github.com/Secreto31126/whatsapp-api-js/issues | GitHub} so we can\n * investigate these impossibles scenarios.\n */\nexport class WhatsAppAPIUnexpectedError extends WhatsAppAPIError {\n    /**\n     * @internal\n     */\n    constructor(message: string, httpStatus: number) {\n        super(message + \" \u00AF\\\\_(\u30C4)_/\u00AF\", httpStatus);\n    }\n\n    get docs() {\n        return this.url(\"WhatsAppAPIUnexpectedError\");\n    }\n}\n"],
  "mappings": "AAqBO,MAAe,yBAAyB,MAAM;AAAA;AAAA;AAAA;AAAA,EAIxC;AAAA;AAAA;AAAA;AAAA,EAKT,YAAY,SAAiB,YAAoB;AAC7C,UAAM,OAAO;AACb,SAAK,OAAO;AACZ,SAAK,aAAa;AAAA,EACtB;AAAA,EAEU,IAAI,MAAc;AACxB,WAAO,gDAAgD,IAAI;AAAA,EAC/D;AAMJ;AAkBO,MAAM,uCAAuC,iBAAiB;AAAA;AAAA;AAAA;AAAA,EAIjE,cAAc;AACV,UAAM,oBAAoB,GAAG;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,OAAO;AACP,WAAO,KAAK,IAAI,gCAAgC;AAAA,EACpD;AACJ;AAkBO,MAAM,yCAAyC,iBAAiB;AAAA;AAAA;AAAA;AAAA,EAInE,cAAc;AACV,UAAM,qBAAqB,GAAG;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,OAAO;AACP,WAAO,KAAK,IAAI,kCAAkC;AAAA,EACtD;AACJ;AAmBO,MAAM,yCAAyC,iBAAiB;AAAA;AAAA;AAAA;AAAA,EAInE,cAAc;AACV,UAAM,sBAAsB,GAAG;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,OAAO;AACP,WAAO,KAAK,IAAI,kCAAkC;AAAA,EACtD;AACJ;AAwBO,MAAM,4CAA4C,iBAAiB;AAAA;AAAA;AAAA;AAAA,EAItE,cAAc;AACV,UAAM,yBAAyB,GAAG;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,OAAO;AACP,WAAO,KAAK,IAAI,qCAAqC;AAAA,EACzD;AACJ;AA2CO,MAAM,uCAAuC,iBAAiB;AAAA;AAAA;AAAA;AAAA,EAIjE,cAAc;AACV,UAAM,2BAA2B,GAAG;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,OAAO;AACP,WAAO,KAAK,IAAI,gCAAgC;AAAA,EACpD;AACJ;AA2BO,MAAM,2CAA2C,iBAAiB;AAAA;AAAA;AAAA;AAAA,EAIrE,cAAc;AACV,UAAM,wBAAwB,GAAG;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,OAAO;AACP,WAAO,KAAK,IAAI,oCAAoC;AAAA,EACxD;AACJ;AAcO,MAAM,4CAA4C,iBAAiB;AAAA;AAAA;AAAA;AAAA,EAItE,cAAc;AACV,UAAM,yBAAyB,GAAG;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,OAAO;AACP,WAAO,KAAK,IAAI,qCAAqC;AAAA,EACzD;AACJ;AAgCO,MAAM,4CAA4C,iBAAiB;AAAA;AAAA;AAAA;AAAA,EAItE,cAAc;AACV,UAAM,8BAA8B,GAAG;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,OAAO;AACP,WAAO,KAAK,IAAI,qCAAqC;AAAA,EACzD;AACJ;AASO,MAAM,mCAAmC,iBAAiB;AAAA;AAAA;AAAA;AAAA,EAI7D,YAAY,SAAiB,YAAoB;AAC7C,UAAM,UAAU,0BAAe,UAAU;AAAA,EAC7C;AAAA,EAEA,IAAI,OAAO;AACP,WAAO,KAAK,IAAI,4BAA4B;AAAA,EAChD;AACJ;",
  "names": []
}
