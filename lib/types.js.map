{
  "version": 3,
  "sources": ["../src/types.ts"],
  "sourcesContent": ["/**\n * @module types\n *\n * @description\n * The types of the library. Mostly for internal use,\n * but if you want to \"understand\" the code under the hood,\n * feel free to read the docs :)\n */\n\nimport type {\n    Text,\n    Audio,\n    Document,\n    Image,\n    Sticker,\n    Video,\n    Location,\n    Interactive,\n    Template,\n    Reaction,\n    Contacts\n} from \"./messages/index.d.ts\";\nimport type { AtLeastOne } from \"./utils.d.ts\";\n\nexport const DEFAULT_API_VERSION = \"v23.0\";\n\n/**\n * The main constructor arguments for the API\n */\nexport type TheBasicConstructorArguments = {\n    /**\n     * The API token, given at setup.\n     * You must provide an API token to use the framework.\n     *\n     * It can either be a temporal or permanent one.\n     *\n     * In order to create a permanent token, first make sure you have\n     * linked your WhatsApp account to a Meta Commercial Account in\n     * [Meta for Developers Dashboard](https://developers.facebook.com/apps).\n     *\n     * After that, head to [Bussiness Settings](https://business.facebook.com/settings/system-users),\n     * select your app, create a new system user with `admin role`.\n     * Then click \"Add Actives\", select Apps -\\> Your App -\\> App Administrator.\n     *\n     * And this was the point were Meta decided I was too sus because\n     * I created a second bussiness to follow my own tutorial,\n     * and as I didn't want to give them my ID, they banned my account.\n     *\n     * If you read until here, you probably will figure it out.\n     * It's not that hard after getting in the right place.\n     *\n     * Really wish WhatsApp gets away from Meta soon...\n     *\n     * (Sorry for the rant, here's the [actual documentation](https://developers.facebook.com/docs/whatsapp/business-management-api/get-started) :)\n     */\n    token: string;\n    /**\n     * The app secret, given at setup.\n     *\n     * The secret is used as a signature to validate payload's authenticity.\n     *\n     * To get your app secret, head to\n     * [Meta for Developers Dashboard](https://developers.facebook.com/apps),\n     * select your app and open Settings -\\> Basic -\\> App Secret -\\> Show.\n     *\n     * If you want to skip the verification and remove the need to provide the secret,\n     * set `secure` to `false`.\n     */\n    appSecret?: string | never;\n    /**\n     * The webhook verify token, configured at setup.\n     * Used exclusively to verify the server against WhatsApp's servers via the GET method.\n     *\n     * Not required by default, but calling this.get() without it will result in an error.\n     */\n    webhookVerifyToken?: string;\n    /**\n     * The version of the API, defaults to {@link DEFAULT_API_VERSION}.\n     */\n    v?: string;\n    /**\n     * If set to false, none of the API checks will be performed, and it will be used in a less secure way.\n     *\n     * Defaults to true.\n     */\n    secure?: boolean;\n    /**\n     * The ponyfills to use.\n     *\n     * This are meant to provide standard APIs implementations\n     * on enviroments that don't have them.\n     *\n     * For example, if using Node 16, you will need to ponyfill\n     * the fetch method with any spec complient fetch method.\n     *\n     * @remarks\n     * With the additions of {@link setup} for the most common enviroments,\n     * this parameter should no longer be configured manually.\n     *\n     * @example\n     * ```ts\n     * import { fetch } from \"undici\";\n     * import { subtle } from \"node:crypto\";\n     *\n     * const api = new WhatsAppAPI({\n     *     token: \"my-token\",\n     *     appSecret: \"my-app-secret\",\n     *     ponyfill: {\n     *         fetch,\n     *         subtle\n     *     }\n     * });\n     * ```\n     */\n    ponyfill?: {\n        /**\n         * The fetch ponyfill to use for the requests. If not specified, it defaults to the fetch function from the enviroment.\n         */\n        fetch?: typeof fetch;\n        /**\n         * The subtle ponyfill to use for the signatures. If not specified, it defaults to crypto.subtle from the enviroment.\n         */\n        subtle?: Pick<typeof crypto.subtle, \"importKey\" | \"sign\">;\n    };\n};\n\n/**\n * This switch allows TypeScript to cry if appSecret is not provided when secure is true.\n */\nexport type SecureLightSwitch =\n    | {\n          secure?: true;\n          appSecret: string;\n      }\n    | {\n          secure: false;\n          appSecret?: never;\n      };\n\n/**\n * Created this type if in the future the constructor needs more complex types.\n */\nexport type ExtraTypesThatMakeTypescriptWork = SecureLightSwitch;\n\n/**\n * Monkey patching TypeDoc inability to handle complex types.\n *\n * You should absolutely read {@link TheBasicConstructorArguments} in order to use the framework.\n */\nexport type WhatsAppAPIConstructorArguments = TheBasicConstructorArguments &\n    ExtraTypesThatMakeTypescriptWork;\n\n/**\n * The base class of all the library messages\n *\n * Polymorphism is cool :]\n */\nexport abstract class ClientMessage {\n    /**\n     * The message type\n     *\n     * @internal\n     */\n    abstract get _type(): ClientMessageNames;\n}\n\nexport interface ClientTypedMessageComponent {\n    /**\n     * The message's component type\n     *\n     * @internal\n     */\n    get _type(): string;\n}\n\nexport interface ClientBuildableMessageComponent {\n    /**\n     * The message's component builder method\n     *\n     * @internal\n     */\n    _build(..._: unknown[]): unknown;\n}\n\nexport abstract class ClientLimitedMessageComponent<T, N extends number> {\n    /**\n     * Throws an error if the array length is greater than the specified number.\n     *\n     * @param p - The parent component name\n     * @param c - The component name\n     * @param a - The array to check the length of\n     * @param n - The maximum length\n     * @throws `${p} can't have more than ${n} ${c}`\n     */\n    constructor(p: string, c: string, a: Array<T>, n: N) {\n        if (a.length > n) {\n            throw new Error(`${p} can't have more than ${n} ${c}`);\n        }\n    }\n}\n\n/**\n * All sections are structured the same way, so this abstract class is used to reduce code duplication\n *\n * @remarks\n * - All sections must have between 1 and N elements\n * - All sections must have a title if more than 1 section is provided\n *\n * @typeParam T - The type of the components of the section\n * @typeParam N - The maximum number of elements in the section\n */\nexport abstract class Section<\n    T,\n    N extends number\n> extends ClientLimitedMessageComponent<T, N> {\n    /**\n     * The title of the section\n     */\n    readonly title?: string;\n\n    /**\n     * Builds a section component\n     *\n     * @param name - The name of the section's type\n     * @param keys_name - The name of the section's keys\n     * @param elements - The elements of the section\n     * @param max - The maximum number of elements in the section\n     * @param title - The title of the section\n     * @param title_length - The maximum length of the title\n     * @throws If more than N elements are provided\n     * @throws If title is over 24 characters if provided\n     */\n    constructor(\n        name: string,\n        keys_name: string,\n        elements: AtLeastOne<T>,\n        max: N,\n        title?: string,\n        title_length = 24\n    ) {\n        super(name, keys_name, elements, max);\n\n        if (title) {\n            if (title.length > title_length) {\n                throw new Error(\n                    `${name} title must be ${title_length} characters or less`\n                );\n            }\n\n            this.title = title;\n        }\n    }\n}\n\n// Somehow, Contacts still manages to be annoying\nexport abstract class ContactComponent\n    implements ClientTypedMessageComponent, ClientBuildableMessageComponent\n{\n    /**\n     * @override\n     * @internal\n     */\n    _build(): unknown {\n        return this;\n    }\n\n    /**\n     * Whether the component can be repeated multiple times in a contact.\n     *\n     * @internal\n     */\n    abstract get _many(): boolean;\n    /**\n     * @override\n     * @internal\n     */\n    abstract get _type(): string;\n}\n\n/**\n * A contact multiple component can be repeated multiple times in a contact.\n */\nexport abstract class ContactMultipleComponent extends ContactComponent {\n    /**\n     * @override\n     * @internal\n     */\n    get _many(): true {\n        return true;\n    }\n\n    /**\n     * @override\n     * @internal\n     */\n    abstract get _type(): string;\n}\n\n/**\n * A contact unique component can only be used once in a contact.\n */\nexport abstract class ContactUniqueComponent extends ContactComponent {\n    /**\n     * @override\n     * @internal\n     */\n    get _many(): false {\n        return false;\n    }\n\n    /**\n     * @override\n     * @internal\n     */\n    abstract get _type(): string;\n}\n\n/**\n * Polymorphism intensifies. Also helps with the _type typings :)\n */\nexport interface InteractiveAction extends ClientTypedMessageComponent {\n    /**\n     * @overload\n     * @internal\n     */\n    get _type():\n        | \"list\"\n        | \"button\"\n        | \"catalog_message\"\n        | \"product\"\n        | \"product_list\"\n        | \"cta_url\"\n        | \"flow\"\n        | \"location_request_message\"\n        | \"call_permission_request\";\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface TemplateComponent extends ClientBuildableMessageComponent {}\n\nexport class TemplateNamedParameter {\n    /**\n     * The name of the parameter, optional if using number variables\n     */\n    readonly parameter_name?: string;\n\n    /**\n     * @param parameter_name - The name of the parameter\n     * @throws If parameter_name is over 20 characters or contains characters other than lowercase a-z and _\n     */\n    constructor(parameter_name?: string) {\n        if (!parameter_name) return;\n\n        if (!/^[a-z_]{1,20}$/.test(parameter_name))\n            throw new Error(\n                \"parameter_name can't be over 20 characters long and must contain only lowercase a-z and _\"\n            );\n\n        this.parameter_name = parameter_name;\n    }\n}\n\nexport type ClientMessageNames =\n    | \"text\"\n    | \"audio\"\n    | \"document\"\n    | \"image\"\n    | \"sticker\"\n    | \"video\"\n    | \"location\"\n    | \"contacts\"\n    | \"interactive\"\n    | \"template\"\n    | \"reaction\";\n\nexport type ClientTypingIndicators = \"text\";\n\n// #region Client Message Request\n\nexport type ClientMessageRequest = {\n    /**\n     * The messaging product\n     */\n    messaging_product: \"whatsapp\";\n    /**\n     * The user's phone number\n     */\n    to: string;\n    /**\n     * Currently you can only send messages to individuals\n     */\n    recipient_type: \"individual\";\n    /**\n     * The message to reply to\n     */\n    context?: {\n        /**\n         * The message id to reply to\n         */\n        message_id: string;\n    };\n    /**\n     * An arbitrary 512B string, useful for tracking.\n     *\n     * Any app subscribed to the messages webhook field on the WhatsApp Business Account can get this string,\n     * as it is included in statuses object within webhook payloads.\n     *\n     * Cloud API does not process this field, it just returns it as part of sent/delivered/read message webhooks.\n     */\n    biz_opaque_callback_data?: string;\n} & {\n    [Type in ClientMessageNames]?: ClientMessage;\n} & (\n        | {\n              type: \"text\";\n              text: Text;\n          }\n        | {\n              type: \"audio\";\n              audio: Audio;\n          }\n        | {\n              type: \"document\";\n              document: Document;\n          }\n        | {\n              type: \"image\";\n              image: Image;\n          }\n        | {\n              type: \"sticker\";\n              sticker: Sticker;\n          }\n        | {\n              type: \"video\";\n              video: Video;\n          }\n        | {\n              type: \"location\";\n              location: Location;\n          }\n        | {\n              type: \"contacts\";\n              contacts: Contacts;\n          }\n        | {\n              type: \"interactive\";\n              interactive: Interactive;\n          }\n        | {\n              type: \"template\";\n              template: Template;\n          }\n        | {\n              type: \"reaction\";\n              reaction: Reaction;\n          }\n    );\n\n// #endregion\n\nexport type ServerTextMessage = {\n    type: \"text\";\n    text: {\n        body: string;\n    };\n};\n\nexport type ServerAudioMessage = {\n    type: \"audio\";\n    audio: {\n        mime_type: string;\n        sha256: string;\n        id: string;\n    };\n};\n\nexport type ServerDocumentMessage = {\n    type: \"document\";\n    document: {\n        caption?: string;\n        filename: string;\n        mime_type: string;\n        sha256: string;\n        id: string;\n    };\n};\n\nexport type ServerImageMessage = {\n    type: \"image\";\n    image: {\n        caption?: string;\n        mime_type: string;\n        sha256: string;\n        id: string;\n    };\n};\n\nexport type ServerStickerMessage = {\n    type: \"sticker\";\n    sticker: {\n        id: string;\n        animated: boolean;\n        mime_type: \"image/webp\";\n        sha256: string;\n    };\n};\n\nexport type ServerVideoMessage = {\n    type: \"video\";\n    video: {\n        mime_type: string;\n        sha256: string;\n        id: string;\n    };\n};\n\nexport type ServerLocationMessage = {\n    type: \"location\";\n    location: {\n        latitude: string;\n        longitude: string;\n        name?: string;\n        address?: string;\n    };\n};\n\nexport type ServerContactsMessage = {\n    type: \"contacts\";\n    contacts: [\n        {\n            addresses?: [\n                {\n                    city?: string;\n                    country?: string;\n                    country_code?: string;\n                    state?: string;\n                    street?: string;\n                    type?: string;\n                    zip?: string;\n                }\n            ];\n            birthday?: string;\n            emails?: [\n                {\n                    email?: string;\n                    type?: string;\n                }\n            ];\n            name: {\n                formatted_name: string;\n                first_name?: string;\n                last_name?: string;\n                middle_name?: string;\n                suffix?: string;\n                prefix?: string;\n            };\n            org?: {\n                company?: string;\n                department?: string;\n                title?: string;\n            };\n            phones?: [\n                {\n                    phone?: string;\n                    wa_id?: string;\n                    type?: string;\n                }\n            ];\n            urls?: [\n                {\n                    url?: string;\n                    type?: string;\n                }\n            ];\n        }\n    ];\n};\n\nexport type ServerInteractiveButtonMessage = {\n    type: \"button_reply\";\n    button_reply: {\n        id: string;\n        title: string;\n    };\n};\n\nexport type ServerInteractiveListMessage = {\n    type: \"list_reply\";\n    list_reply: {\n        id: string;\n        title: string;\n        description?: string;\n    };\n};\n\nexport type ServerInteractiveNFMMessage = {\n    type: \"nfm_reply\";\n    nfm_reply:\n        | {\n              name: \"address_message\";\n              body?: string;\n              response_json: string;\n          }\n        | {\n              name: \"flow\";\n              body: \"Sent\";\n              response_json: string;\n          }\n        | {\n              name?: string;\n              body?: string;\n              response_json: string;\n          };\n};\n\nexport type ServerInteractiveCallPermissionMessage = {\n    type: \"call_permission_reply\";\n    call_permission_reply: {\n        response: \"accept\" | \"reject\";\n        is_permanent: false;\n        expiration_timestamp: number;\n        response_source: \"user_action\" | \"automatic\";\n    };\n};\n\nexport type ServerInteractiveMessage = {\n    type: \"interactive\";\n    interactive:\n        | ServerInteractiveButtonMessage\n        | ServerInteractiveListMessage\n        | ServerInteractiveNFMMessage\n        | ServerInteractiveCallPermissionMessage;\n};\n\nexport type ServerButtonMessage = {\n    type: \"button\";\n    button: {\n        text: string;\n        payload: string;\n    };\n};\n\nexport type ServerReactionMessage = {\n    type: \"reaction\";\n    reaction: {\n        emoji: string;\n        message_id: string;\n    };\n};\n\nexport type ServerOrderMessage = {\n    type: \"order\";\n    order: {\n        catalog_id: string;\n        product_items: {\n            product_retailer_id: string;\n            quantity: string;\n            item_price: string;\n            currency: string;\n        }[];\n        text?: string;\n    };\n};\n\nexport type ServerSystemMessage = {\n    type: \"system\";\n    system: {\n        body: string;\n        identity: string;\n        /**\n         * @deprecated Since v12.0 it is undefined, use `wa_id` instead.\n         *\n         * I'm actually stunned this exists, since I started the library with v13 or 14.\n         */\n        new_wa_id: number | string;\n        wa_id: string;\n        type:\n            | \"customer_changed_number\"\n            | \"customer_identity_changed\"\n            | string /* Backwards compatibility */;\n        customer: string;\n    };\n};\n\nexport type ServerRequestWelcomeMessage = {\n    type: \"request_welcome\";\n};\n\nexport type ServerUnknownMessage = {\n    type: \"unknown\";\n    errors: [\n        {\n            code: number;\n            details: \"Message type is not currently supported\";\n            title: \"Unsupported message type\";\n        }\n    ];\n};\n\nexport type ServerMessageTypes =\n    | ServerTextMessage\n    | ServerAudioMessage\n    | ServerDocumentMessage\n    | ServerImageMessage\n    | ServerStickerMessage\n    | ServerVideoMessage\n    | ServerLocationMessage\n    | ServerContactsMessage\n    | ServerInteractiveMessage\n    | ServerButtonMessage\n    | ServerReactionMessage\n    | ServerOrderMessage\n    | ServerSystemMessage\n    | ServerRequestWelcomeMessage\n    | ServerUnknownMessage;\n\nexport type ServerMessage = {\n    from: string;\n    id: string;\n    timestamp: string;\n    context?: {\n        forwarded?: boolean;\n        frequently_forwarded?: boolean;\n        from?: string;\n        id?: string;\n        referred_product?: {\n            catalog_id: string;\n            product_retailer_id: string;\n        };\n    };\n    identity?: {\n        acknowledged: boolean;\n        created_timestamp: string;\n        hash: string;\n    };\n    /**\n     * Never saw this property on the wild, but it's documented\n     */\n    errors?: [ServerError];\n    referral?: {\n        source_url: string;\n        source_id: string;\n        source_type: \"ad\" | \"post\";\n        headline: string;\n        body: string;\n        ctwa_clid: string;\n        media_type: \"image\" | \"video\";\n    } & (\n        | {\n              media_type: \"image\";\n              image_url: string;\n          }\n        | {\n              media_type: \"video\";\n              video_url: string;\n              thumbnail_url: string;\n          }\n    );\n} & ServerMessageTypes;\n\nexport type ServerCall = {\n    id: `wacid.${string}`;\n    from: string;\n    to: string;\n    timestamp: `${number}`;\n    direction: \"USER_INITIATED\" | \"BUSINESS_INITIATED\";\n};\n\nexport type ServerCallConnect = ServerCall & {\n    event: \"connect\";\n    session: {\n        sdp_type: \"offer\";\n        sdp: string;\n    };\n};\n\nexport type ServerCallTerminate = ServerCall & {\n    event: \"terminate\";\n    status: \"COMPLETED\" | \"FAILED\";\n    biz_opaque_callback_data: string;\n    start_time?: `${number}`;\n    end_time?: `${number}`;\n    duration?: number;\n};\n\nexport type ServerContacts = {\n    profile: {\n        name?: string;\n    };\n    wa_id: string;\n};\n\nexport type ServerInitiation =\n    | \"authentication\"\n    | \"marketing\"\n    | \"utility\"\n    | \"service\"\n    | \"referral_conversion\";\n\nexport type ServerStatus = \"sent\" | \"delivered\" | \"read\" | \"failed\";\n\nexport type ServerPricing = {\n    pricing_model: \"PMP\";\n    /**\n     * @deprecated Since v16 with the release of the new pricing model\n     */\n    billable?: boolean;\n    type: \"regular\" | \"free_customer_service\" | \"free_entry_point\";\n    category:\n        | ServerInitiation\n        | \"authentication_international\"\n        | \"marketing_lite\";\n};\n\nexport type ServerConversation = {\n    id: string;\n    expiration_timestamp: number;\n    origin: {\n        type: ServerInitiation;\n    };\n};\n\nexport type ServerError = {\n    code: number;\n    title: string;\n    message: string;\n    error_data: {\n        details: string;\n    };\n};\n\nexport type GetParams = {\n    \"hub.mode\": \"subscribe\";\n    \"hub.verify_token\": string;\n    \"hub.challenge\": string;\n};\n\nexport type PostDataMessageField = {\n    field: \"messages\";\n    value:\n        | {\n              contacts?: [ServerContacts];\n              messages: [ServerMessage];\n          }\n        | {\n              statuses: [\n                  {\n                      id: string;\n                      status: ServerStatus;\n                      timestamp: string;\n                      recipient_id: string;\n                      biz_opaque_callback_data?: string;\n                  } & (\n                      | {\n                            conversation?: ServerConversation;\n                            pricing: ServerPricing;\n                            errors: undefined;\n                        }\n                      | {\n                            conversation: undefined;\n                            pricing: undefined;\n                            errors: [ServerError];\n                        }\n                  )\n              ];\n          };\n};\n\nexport type PostDataCallField = {\n    field: \"calls\";\n    value:\n        | {\n              contacts: [ServerContacts];\n              calls: [ServerCallConnect | ServerCallTerminate];\n          }\n        | {\n              statuses: [\n                  {\n                      id: `wacid.${string}`;\n                      status: \"RINGING\" | \"ACCEPTED\" | \"REJECTED\";\n                      timestamp: `${number}`;\n                      recipient_id: string;\n                      biz_opaque_callback_data?: string;\n                      type: \"call\";\n                  }\n              ];\n          };\n};\n\nexport type PostData = {\n    object: \"whatsapp_business_account\";\n    entry: {\n        id: string;\n        changes: ({\n            value: {\n                messaging_product: \"whatsapp\";\n                metadata: {\n                    display_phone_number: string;\n                    phone_number_id: string;\n                };\n            };\n        } & (PostDataMessageField | PostDataCallField))[];\n    }[];\n};\n\n/**\n * @see https://developers.facebook.com/docs/whatsapp/cloud-api/support/error-codes\n */\nexport type ServerErrorResponse = {\n    error: {\n        message: string;\n        type: string;\n        code: number;\n        error_data: {\n            messaging_product: \"whatsapp\";\n            details: string;\n        };\n        error_subcode: number;\n        fbtrace_id: string;\n    };\n};\n\nexport type NoServerError = {\n    error?: never;\n};\n\nexport type ServerSuccessResponse = {\n    success: true;\n} & NoServerError;\n\nexport type ServerSentMessageResponse = {\n    messaging_product: \"whatsapp\";\n    contacts: [\n        {\n            input: string;\n            wa_id: string;\n        }\n    ];\n    messages: [\n        {\n            id: string;\n            message_status?: \"accepted\" | \"held_for_quality_assessment\";\n        }\n    ];\n};\n\nexport type ServerMessageResponse =\n    | (ServerSentMessageResponse & NoServerError)\n    | ServerErrorResponse;\n\nexport type ServerMarkAsReadResponse =\n    | ServerSuccessResponse\n    | ServerErrorResponse;\n\nexport type ServerInitiateCallResponse =\n    | {\n          messaging_product: \"whatsapp\";\n          calls: [{ id: `wacid.${string}` }];\n      }\n    | ServerErrorResponse;\n\nexport type ServerPreacceptCallResponse =\n    | (ServerSuccessResponse & { messaging_product: \"whatsapp\" })\n    | ServerErrorResponse;\n\nexport type ServerRejectCallResponse =\n    | (ServerSuccessResponse & { messaging_product: \"whatsapp\" })\n    | ServerErrorResponse;\n\nexport type ServerAcceptCallResponse =\n    | (ServerSuccessResponse & { messaging_product: \"whatsapp\" })\n    | ServerErrorResponse;\n\nexport type ServerTerminateCallResponse =\n    | (ServerSuccessResponse & { messaging_product: \"whatsapp\" })\n    | ServerErrorResponse;\n\nexport type ServerQR = {\n    code: string;\n    prefilled_message: string;\n    deep_link_url: string;\n    qr_image_url?: string;\n};\n\nexport type ServerCreateQRResponse =\n    | (ServerQR & NoServerError)\n    | ServerErrorResponse;\n\nexport type ServerRetrieveQRResponse =\n    | ({ data: ServerQR[] } & NoServerError)\n    | ServerErrorResponse;\n\nexport type ServerUpdateQRResponse =\n    | (ServerQR & NoServerError)\n    | ServerErrorResponse;\n\nexport type ServerDeleteQRResponse =\n    | ServerSuccessResponse\n    | ServerErrorResponse;\n\nexport type ServerMedia = {\n    id: string;\n};\n\nexport type ServerMediaUploadResponse =\n    | (ServerMedia & NoServerError)\n    | ServerErrorResponse;\n\nexport type ValidMimeTypes =\n    | \"audio/aac\"\n    | \"audio/mp4\"\n    | \"audio/mpeg\"\n    | \"audio/amr\"\n    | \"audio/ogg\"\n    | \"text/plain\"\n    | \"application/pdf\"\n    | \"application/vnd.ms-powerpoint\"\n    | \"application/msword\"\n    | \"application/vnd.ms-excel\"\n    | \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n    | \"application/vnd.openxmlformats-officedocument.presentationml.presentation\"\n    | \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n    | \"image/jpeg\"\n    | \"image/png\"\n    | \"video/mp4\"\n    | \"video/3gp\"\n    | \"image/webp\";\n\nexport type ServerMediaRetrieveResponse =\n    | ({\n          messaging_product: \"whatsapp\";\n          url: string;\n          mime_type: ValidMimeTypes;\n          sha256: string;\n          file_size: string;\n      } & ServerMedia &\n          NoServerError)\n    | ServerErrorResponse;\n\nexport type ServerMediaDeleteResponse =\n    | ServerSuccessResponse\n    | ServerErrorResponse;\n\nexport type ServerBlockedError = Pick<\n    ServerErrorResponse[\"error\"],\n    \"message\" | \"type\" | \"code\"\n> & {\n    error_data: {\n        details: string;\n    };\n};\n\nexport type ServerBlockedUser = {\n    input: string;\n    wa_id: string;\n};\n\nexport type ServerBlockFailedUser = {\n    input: string;\n    errors: Omit<ServerBlockedError, \"type\">[];\n};\n\nexport type ServerBlockResponse =\n    | {\n          messaging_product: \"whatsapp\";\n          block_users: {\n              added_users: ServerBlockedUser[];\n              failed_users?: ServerBlockFailedUser[];\n          };\n          errors?: ServerBlockedError;\n      }\n    | ServerErrorResponse;\n\nexport type ServerUnblockResponse =\n    | {\n          messaging_product: \"whatsapp\";\n          block_users: {\n              removed_users: ServerBlockedUser[];\n              // Not sure if this actually exists...\n              failed_users?: ServerBlockFailedUser[];\n          };\n          errors?: ServerBlockedError;\n      }\n    | ServerErrorResponse;\n"],
  "mappings": "AAwBO,MAAM,sBAAsB;AAqI5B,MAAe,cAAc;AAOpC;AAoBO,MAAe,8BAAmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUrE,YAAY,GAAW,GAAW,GAAa,GAAM;AACjD,QAAI,EAAE,SAAS,GAAG;AACd,YAAM,IAAI,MAAM,GAAG,CAAC,yBAAyB,CAAC,IAAI,CAAC,EAAE;AAAA,IACzD;AAAA,EACJ;AACJ;AAYO,MAAe,gBAGZ,8BAAoC;AAAA;AAAA;AAAA;AAAA,EAIjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcT,YACI,MACA,WACA,UACA,KACA,OACA,eAAe,IACjB;AACE,UAAM,MAAM,WAAW,UAAU,GAAG;AAEpC,QAAI,OAAO;AACP,UAAI,MAAM,SAAS,cAAc;AAC7B,cAAM,IAAI;AAAA,UACN,GAAG,IAAI,kBAAkB,YAAY;AAAA,QACzC;AAAA,MACJ;AAEA,WAAK,QAAQ;AAAA,IACjB;AAAA,EACJ;AACJ;AAGO,MAAe,iBAEtB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKI,SAAkB;AACd,WAAO;AAAA,EACX;AAaJ;AAKO,MAAe,iCAAiC,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKpE,IAAI,QAAc;AACd,WAAO;AAAA,EACX;AAOJ;AAKO,MAAe,+BAA+B,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKlE,IAAI,QAAe;AACf,WAAO;AAAA,EACX;AAOJ;AAyBO,MAAM,uBAAuB;AAAA;AAAA;AAAA;AAAA,EAIvB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMT,YAAY,gBAAyB;AACjC,QAAI,CAAC,eAAgB;AAErB,QAAI,CAAC,iBAAiB,KAAK,cAAc;AACrC,YAAM,IAAI;AAAA,QACN;AAAA,MACJ;AAEJ,SAAK,iBAAiB;AAAA,EAC1B;AACJ;",
  "names": []
}
