{
  "version": 3,
  "sources": ["../../../src/middleware/express.ts"],
  "sourcesContent": ["import { WhatsAppAPIMiddleware } from \"./globals.js\";\nimport { isInteger } from \"../utils.js\";\n\nimport type { Request } from \"express\";\nimport type { GetParams } from \"../types\";\n\n/**\n * Express.js middleware for WhatsAppAPI\n */\nexport class WhatsAppAPI extends WhatsAppAPIMiddleware {\n    /**\n     * POST request handler for Express.js\n     *\n     * @remarks This method expects the request body to be the original string, not a parsed body\n     * @see https://expressjs.com/en/guide/using-middleware.html#middleware.router\n     * @see https://expressjs.com/en/4x/api.html#express.text\n     *\n     * @example\n     * ```ts\n     * import express from \"express\";\n     * import { WhatsAppAPI } from \"whatsapp-api-js/middleware/express\";\n     *\n     * const app = express();\n     * const Whatsapp = new WhatsAppAPI({\n     *     token: \"YOUR_TOKEN\",\n     *     appSecret: \"YOUR_APP_SECRET\",\n     *     webhookVerifyToken: \"YOUR_WEBHOOK_VERIFY_TOKEN\"\n     * });\n     *\n     * // Your app shall use any express middleware, as long as the entry point where `handle_post`\n     * // is called has the request body as a string, not a parsed body.\n     * app.use(express.json());\n     *\n     * // The `express.text({ type: '*\\/*' })` is optional if you are NOT using `express.json()`.\n     * app.post(\"/message\", express.text({ type: '*\\/*' }), async (req, res) => {\n     *     res.sendStatus(await Whatsapp.handle_post(req));\n     * });\n     * ```\n     *\n     * @override\n     * @param req - The request object from Express.js\n     * @returns The status code to be sent to the client\n     */\n    async handle_post(req: Request): Promise<number> {\n        try {\n            await this.post(\n                JSON.parse(req.body ?? \"{}\"),\n                req.body,\n                req.header(\"x-hub-signature-256\")\n            );\n\n            return 200;\n        } catch (e) {\n            // In case the JSON.parse fails \u00AF\\_(\u30C4)_/\u00AF\n            return isInteger(e) ? e : 500;\n        }\n    }\n\n    /**\n     * GET request handler for Express.js\n     *\n     * @example\n     * ```ts\n     * import express from \"express\";\n     * import { WhatsAppAPI } from \"whatsapp-api-js/middleware/express\";\n     *\n     * const app = express();\n     * const Whatsapp = new WhatsAppAPI({\n     *     token: \"YOUR_TOKEN\",\n     *     appSecret: \"YOUR_APP_SECRET\",\n     *     webhookVerifyToken: \"YOUR_WEBHOOK_VERIFY_TOKEN\"\n     * });\n     *\n     * app.get(\"/message\", (req, res) => {\n     *     try {\n     *         res.send(Whatsapp.handle_get(req));\n     *     } catch (e) {\n     *         res.sendStatus(e as number);\n     *     }\n     * });\n     * ```\n     *\n     * @override\n     * @param req - The request object from Express.js\n     * @returns The challenge string to be sent to the client\n     * @throws The error code\n     */\n    handle_get(req: Request): string {\n        try {\n            return this.get(req.query as GetParams);\n        } catch (e) {\n            // In case who knows what fails \u00AF\\_(\u30C4)_/\u00AF\n            throw isInteger(e) ? e : 500;\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAsC;AACtC,mBAA0B;AAQnB,MAAM,oBAAoB,qCAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkCnD,MAAM,YAAY,KAA+B;AAC7C,QAAI;AACA,YAAM,KAAK;AAAA,QACP,KAAK,MAAM,IAAI,QAAQ,IAAI;AAAA,QAC3B,IAAI;AAAA,QACJ,IAAI,OAAO,qBAAqB;AAAA,MACpC;AAEA,aAAO;AAAA,IACX,SAAS,GAAG;AAER,iBAAO,wBAAU,CAAC,IAAI,IAAI;AAAA,IAC9B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+BA,WAAW,KAAsB;AAC7B,QAAI;AACA,aAAO,KAAK,IAAI,IAAI,KAAkB;AAAA,IAC1C,SAAS,GAAG;AAER,gBAAM,wBAAU,CAAC,IAAI,IAAI;AAAA,IAC7B;AAAA,EACJ;AACJ;",
  "names": []
}
