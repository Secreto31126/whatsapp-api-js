{
  "version": 3,
  "sources": ["../../../src/middleware/express.ts"],
  "sourcesContent": ["import { WhatsAppAPIMiddleware } from \"./globals.js\";\nimport { isInteger } from \"../utils.js\";\n\nimport type { Request } from \"express\";\nimport type { GetParams } from \"../types\";\n\n/**\n * Express.js middleware for WhatsAppAPI\n */\nexport class WhatsAppAPI extends WhatsAppAPIMiddleware {\n    /**\n     * POST request handler for Express.js\n     *\n     * @remarks This method expects the request body to be the original string, not a parsed body\n     * @see https://expressjs.com/en/guide/using-middleware.html#middleware.router\n     * @see https://expressjs.com/en/4x/api.html#express.text\n     *\n     * @example\n     * ```ts\n     * import express from \"express\";\n     * import { WhatsAppAPI } from \"whatsapp-api-js/middleware/express\";\n     *\n     * const app = express();\n     * const Whatsapp = new WhatsAppAPI({\n     *     token: \"YOUR_TOKEN\",\n     *     appSecret: \"YOUR_APP_SECRET\",\n     *     webhookVerifyToken: \"YOUR_WEBHOOK_VERIFY_TOKEN\"\n     * });\n     *\n     * // Your app shall use any express middleware, as long as the entry point where `handle_post`\n     * // is called has the request body as a string, not a parsed body.\n     * app.use(express.json());\n     *\n     * // The `express.text({ type: '*\\/*' })` is optional if you are NOT using `express.json()`.\n     * app.post(\"/message\", express.text({ type: '*\\/*' }), async (req, res) => {\n     *     res.sendStatus(await Whatsapp.handle_post(req));\n     * });\n     * ```\n     *\n     * @override\n     * @param req - The request object from Express.js\n     * @returns The status code to be sent to the client\n     */\n    async handle_post(req: Request) {\n        try {\n            return this.post(\n                JSON.parse(req.body ?? \"{}\"),\n                req.body,\n                req.header(\"x-hub-signature-256\")\n            );\n        } catch (e) {\n            // In case the JSON.parse fails \u00AF\\_(\u30C4)_/\u00AF\n            return isInteger(e) ? e : 500;\n        }\n    }\n\n    /**\n     * GET request handler for Express.js\n     *\n     * @example\n     * ```ts\n     * import express from \"express\";\n     * import { WhatsAppAPI } from \"whatsapp-api-js/middleware/express\";\n     *\n     * const app = express();\n     * const Whatsapp = new WhatsAppAPI({\n     *     token: \"YOUR_TOKEN\",\n     *     appSecret: \"YOUR_APP_SECRET\",\n     *     webhookVerifyToken: \"YOUR_WEBHOOK_VERIFY_TOKEN\"\n     * });\n     *\n     * app.get(\"/message\", (req, res) => {\n     *     try {\n     *         res.send(Whatsapp.handle_get(req));\n     *     } catch (e) {\n     *         res.sendStatus(e as number);\n     *     }\n     * });\n     * ```\n     *\n     * @override\n     * @param req - The request object from Express.js\n     * @returns The challenge string to be sent to the client\n     * @throws The error code\n     */\n    handle_get(req: Request) {\n        try {\n            return this.get(req.query as GetParams);\n        } catch (e) {\n            // In case who knows what fails \u00AF\\_(\u30C4)_/\u00AF\n            throw isInteger(e) ? e : 500;\n        }\n    }\n}\n"],
  "mappings": "wpBAAA,+IAAsC,wBACtC,aAA0B,uBAQnB,MAAM,oBAAoB,oCAAsB,CAkCnD,MAAM,YAAY,IAAc,CAC5B,GAAI,CACA,OAAO,KAAK,KACR,KAAK,MAAM,IAAI,MAAQ,IAAI,EAC3B,IAAI,KACJ,IAAI,OAAO,qBAAqB,CACpC,CACJ,OAAS,EAAG,CAER,SAAO,wBAAU,CAAC,EAAI,EAAI,GAC9B,CACJ,CA+BA,WAAW,IAAc,CACrB,GAAI,CACA,OAAO,KAAK,IAAI,IAAI,KAAkB,CAC1C,OAAS,EAAG,CAER,QAAM,wBAAU,CAAC,EAAI,EAAI,GAC7B,CACJ,CACJ",
  "names": []
}
