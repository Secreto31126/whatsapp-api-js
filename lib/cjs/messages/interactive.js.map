{
  "version": 3,
  "sources": ["../../../src/messages/interactive.ts"],
  "sourcesContent": ["import {\n    ClientMessage,\n    ClientLimitedMessageComponent,\n    Section,\n    type InteractiveAction\n} from \"../types.js\";\nimport type { AtLeastOne } from \"../utils\";\n\nimport type { Document, Image, Video } from \"./media\";\n\nimport { Product, ProductSection } from \"./globals.js\";\n\n/**\n * Interactive API object\n *\n * @group Interactive\n */\nexport class Interactive extends ClientMessage {\n    /**\n     * The action for the interactive message\n     */\n    readonly action: InteractiveAction;\n    /**\n     * The body for the interactive message\n     */\n    readonly body?: Body;\n    /**\n     * The header for the interactive message\n     */\n    readonly header?: Header;\n    /**\n     * The footer for the interactive message\n     */\n    readonly footer?: Footer;\n\n    /**\n     * The type of the interactive message\n     */\n    readonly type: InteractiveAction[\"_type\"];\n\n    /**\n     * @override\n     * @internal\n     */\n    get _type(): \"interactive\" {\n        return \"interactive\";\n    }\n\n    /**\n     * Creates an Interactive Reply Buttons object for the API\n     *\n     * @example\n     * ```ts\n     * import {\n     *     Interactive,\n     *     ActionButtons,\n     *     Button,\n     *     Body\n     * } from \"whatsapp-api-js/messages\";\n     *\n     * const interactive_button_message = new Interactive(\n     *     new ActionButtons(\n     *         new Button(\"reply_1\", \"Hello\"),\n     *         new Button(\"reply_2\", \"World\")\n     *     ),\n     *     new Body(\"Hello World\")\n     * );\n     * ```\n     *\n     * @param action - The action for the interactive message\n     * @param body - The body for the interactive message\n     * @param header - The header for the interactive message, it may be undefined if not needed\n     * @param footer - The footer for the interactive message, it may be undefined if not needed\n     */\n    constructor(\n        action: ActionButtons,\n        body: Body,\n        header?: Header,\n        footer?: Footer\n    );\n    /**\n     * Creates an Interactive List object for the API\n     *\n     * @example\n     * ```ts\n     * import { Interactive, ActionList, Row, Body } from \"whatsapp-api-js/messages\";\n     *\n     * const interactive_list_message = new Interactive(\n     *     new ActionList(\n     *         \"Button text\",\n     *         new ListSection(\n     *             \"Section title\",\n     *             new Row(\"reply_1\", \"Hello\", \"Hello description\"),\n     *             new Row(\"reply_2\", \"World\", \"World description\")\n     *         )\n     *     ),\n     *     new Body(\"Hello World\")\n     * );\n     * ```\n     *\n     * @param action - The action for the interactive message\n     * @param body - The body for the interactive message\n     * @param header - The header of type text for the interactive message, it may be undefined if not needed\n     * @param footer - The footer for the interactive message, it may be undefined if not needed\n     * @throws If a header is provided and it's not of type \"text\"\n     */\n    constructor(\n        action: ActionList,\n        body: Body,\n        header?: Header,\n        footer?: Footer\n    );\n    /**\n     * Creates an Interactive Catalog object for the API\n     *\n     * @example\n     * ```ts\n     * import {\n     *     Interactive,\n     *     ActionCatalog,\n     *     Product,\n     *     Body\n     * } from \"whatsapp-api-js/messages\";\n     *\n     * const interactive_catalog_message = new Interactive(\n     *     new ActionCatalog(new Product(\"hello\")),\n     *     new Body(\"Hello World\")\n     * );\n     * ```\n     *\n     * @param action - The action for the interactive message\n     * @param body - The body for the interactive message\n     * @param header - Undefined\n     * @param footer - The footer for the interactive message, it may be undefined if not needed\n     */\n    constructor(\n        action: ActionCatalog,\n        body: Body,\n        header?: undefined,\n        footer?: Footer\n    );\n    /**\n     * Creates an Interactive Single Product object for the API\n     *\n     * @example\n     * ```ts\n     * import { Interactive, ActionProduct, Product } from \"whatsapp-api-js/messages\";\n     *\n     * const interactive_single_product_message = new Interactive(\n     *     new ActionProduct(\"catalog_id\", new Product(\"product_id\"))\n     * );\n     * ```\n     *\n     * @param action - The action for the interactive message\n     * @param body - The body for the interactive message\n     * @param header - Undefined\n     * @param footer - The footer for the interactive message, it may be undefined if not needed\n     */\n    constructor(\n        action: ActionProduct,\n        body?: Body,\n        header?: undefined,\n        footer?: Footer\n    );\n    /**\n     * Creates an Interactive Multi Product object for the API\n     *\n     * @example\n     * ```ts\n     * import {\n     *     Interactive,\n     *     ActionProductList,\n     *     ProductSection,\n     *     Product\n     * } from \"whatsapp-api-js/messages\";\n     *\n     * const interactive_multi_product_message = new Interactive(\n     *     new ActionProductList(\n     *         \"catalog_id\",\n     *         new ProductSection(\n     *             \"Product section title\",\n     *             new Product(\"product_id\"),\n     *             new Product(\"product_id\")\n     *         )\n     *     ),\n     *     new Body(\"Hello World\"),\n     *     new Header(\"Hello World Header\")\n     * );\n     * ```\n     *\n     * @param action - The action for the interactive message\n     * @param body - The body for the interactive message\n     * @param header - The header of type text for the interactive message\n     * @param footer - The footer for the interactive message, it may be undefined if not needed\n     * @throws If header is not of type \"text\"\n     */\n    constructor(\n        action: ActionProductList,\n        body: Body,\n        header: Header,\n        footer?: Footer\n    );\n    /**\n     * Creates an Interactive CTA object for the API\n     *\n     * @example\n     * ```ts\n     * import { Interactive, ActionCTA, Body } from \"whatsapp-api-js/messages\";\n     *\n     * const interactive_catalog_message = new Interactive(\n     *     new ActionCTA(\"Open Google\", \"https://google.com\"),\n     *     new Body(\"You should google it\")\n     * );\n     * ```\n     *\n     * @param action - The action for the interactive message\n     * @param body - The body for the interactive message\n     * @param header - The header of type text for the interactive message, it may be undefined if not needed\n     * @param footer - The footer for the interactive message, it may be undefined if not needed\n     * @throws If a header is provided and it's not of type \"text\"\n     */\n    constructor(\n        action: ActionCTA,\n        body: Body,\n        header?: Header,\n        footer?: Footer\n    );\n    /**\n     * Creates an Interactive Flow object for the API\n     *\n     * @example\n     * ```ts\n     * import {\n     *     Interactive,\n     *     ActionNavigateFlow,\n     *     Body\n     * } from \"whatsapp-api-js/messages\";\n     *\n     * const interactive_navigate_flow_message = new Interactive(\n     *     new ActionNavigateFlow(\n     *         \"5f9b3b4f-2b7a-4f4f-8f4f-4f4f4f4f4f4f\",\n     *         \"5f9b3b4f-2b7a-4f4f-8f4f-4f4f4f4f4f4f\",\n     *         \"Hello World\",\n     *         \"form_screen\",\n     *         {\n     *             name: \"John Doe\",\n     *             age: 42\n     *         }\n     *     ),\n     *     new Body(\"How was your experience today?\")\n     * );\n     * ```\n     *\n     * @example\n     * ```ts\n     * import {\n     *     Interactive,\n     *     ActionDataExchangeFlow,\n     *     Body\n     * } from \"whatsapp-api-js/messages\";\n     *\n     * const interactive_data_exchange_flow_message = new Interactive(\n     *     new ActionDataExchangeFlow(\n     *         \"5f9b3b4f-2b7a-4f4f-8f4f-4f4f4f4f4f4f\",\n     *         \"5f9b3b4f-2b7a-4f4f-8f4f-4f4f4f4f4f4f\",\n     *         \"Hello World\"\n     *     ),\n     *     new Body(\"Hello World\")\n     * );\n     * ```\n     *\n     * @param action - The action for the interactive message\n     * @param body - The body for the interactive message\n     * @param header - The header of type text for the interactive message, it may be undefined if not needed\n     * @param footer - The footer for the interactive message, it may be undefined if not needed\n     * @throws If a header is provided and it's not of type \"text\"\n     */\n    constructor(\n        action: ActionFlow,\n        body: Body,\n        header?: Header,\n        footer?: Footer\n    );\n    /**\n     * Creates an Interactive Location request object for the API\n     *\n     * @example\n     * ```ts\n     * import { Interactive, ActionLocation, Body } from \"whatsapp-api-js/messages\";\n     *\n     * const interactive_catalog_message = new Interactive(\n     *     new ActionLocation(),\n     *     new Body(\"Show me where you live\")\n     * );\n     * ```\n     *\n     * @param action - The action for the interactive message\n     * @param body - The body of the interactive message\n     */\n    constructor(action: ActionLocation, body: Body);\n\n    /**\n     * Create an Interactive object for the API\n     *\n     * @param action - The action for the interactive message\n     * @param body - The body for the interactive message, it may be undefined if not needed.\n     * @param header - The header for the interactive message, it may be undefined if not needed.\n     * @param footer - The footer for the interactive message, it may be undefined if not needed.\n     * @throws If a header is provided for an {@link ActionList}, {@link ActionProductList}, {@link ActionCTA} or {@link ActionFlow} and it's not of type \"text\"\n     */\n    constructor(\n        action: InteractiveAction,\n        body?: Body,\n        header?: Header,\n        footer?: Footer\n    ) {\n        super();\n\n        const require_text_header: InteractiveAction[\"_type\"][] = [\n            \"list\",\n            \"product_list\",\n            \"cta_url\",\n            \"flow\"\n        ];\n\n        if (\n            header &&\n            require_text_header.includes(action._type) &&\n            header.type !== \"text\"\n        ) {\n            throw new Error(\n                `Header of type text is required for ${action._type} action`\n            );\n        }\n\n        this.type = action._type;\n\n        this.action = action;\n        if (body) this.body = body;\n        if (header) this.header = header;\n        if (footer) this.footer = footer;\n    }\n}\n\n/**\n * Body API object\n *\n * @group Interactive\n */\nexport class Body {\n    /**\n     * The text of the body\n     */\n    readonly text: string;\n\n    /**\n     * Builds a body component for an Interactive message\n     *\n     * @param text - The text of the message. Maximum length: 1024 characters.\n     * @throws If text is over 1024 characters\n     */\n    constructor(text: string) {\n        if (text.length > 1024)\n            throw new Error(\"Body text must be less than 1024 characters\");\n\n        this.text = text;\n    }\n}\n\n/**\n * Footer API object\n *\n * @group Interactive\n */\nexport class Footer {\n    /**\n     * The text of the footer\n     */\n    readonly text: string;\n\n    /**\n     * Builds a footer component for an Interactive message\n     *\n     * @param text - Text of the footer. Maximum length: 60 characters.\n     * @throws If text is over 60 characters\n     */\n    constructor(text: string) {\n        if (text.length > 60)\n            throw new Error(\"Footer text must be 60 characters or less\");\n\n        this.text = text;\n    }\n}\n\n/**\n * Header API object\n *\n * @group Interactive\n */\nexport class Header {\n    /**\n     * The type of the header\n     */\n    readonly type: \"text\" | \"image\" | \"video\" | \"document\";\n    /**\n     * The text of the parameter\n     */\n    readonly text?: string;\n    /**\n     * The image of the parameter\n     */\n    readonly image?: Image;\n    /**\n     * The document of the parameter\n     */\n    readonly document?: Document;\n    /**\n     * The video of the parameter\n     */\n    readonly video?: Video;\n\n    /**\n     * Builds a header component for an Interactive message\n     *\n     * @param object - The message object for the header\n     * @throws If object is a string and is over 60 characters\n     * @throws If object is a Media and has a caption\n     */\n    constructor(object: Document | Image | Video | string) {\n        // All interactive's header can go to hell with its \"exceptions\"\n        if (typeof object === \"string\") {\n            if (object.length > 60)\n                throw new Error(\"Header text must be 60 characters or less\");\n\n            this.type = \"text\";\n        } else {\n            this.type = object._type;\n            if (object.caption)\n                throw new Error(`Header ${this.type} must not have a caption`);\n        }\n\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore - TS dumb, the _type will always match the message type\n        this[this.type] = object;\n    }\n}\n\n/**\n * Action API object\n *\n * @group Interactive\n */\nexport class ActionButtons\n    extends ClientLimitedMessageComponent<Button, 3>\n    implements InteractiveAction\n{\n    /**\n     * The buttons of the action\n     */\n    readonly buttons: Button[];\n\n    /**\n     * @override\n     * @internal\n     */\n    get _type(): \"button\" {\n        return \"button\";\n    }\n\n    /**\n     * Builds a reply buttons component for an Interactive message\n     *\n     * @param button - Buttons to be used in the reply buttons. Each button title must be unique within the message. Emojis are supported, markdown is not. Must be between 1 and 3 buttons.\n     * @throws If more than 3 buttons are provided\n     * @throws If two or more buttons have the same id\n     * @throws If two or more buttons have the same title\n     */\n    constructor(...button: AtLeastOne<Button>) {\n        super(\"Reply buttons\", \"button\", button, 3);\n\n        // Find if there are duplicates in button.id\n        const ids = button.map((b) => b[b.type].id);\n        if (ids.length !== new Set(ids).size)\n            throw new Error(\"Reply buttons must have unique ids\");\n\n        // Find if there are duplicates in button.title\n        const titles = button.map((b) => b[b.type].title);\n        if (titles.length !== new Set(titles).size)\n            throw new Error(\"Reply buttons must have unique titles\");\n\n        this.buttons = button;\n    }\n}\n\n/**\n * Button API object\n *\n * @group Interactive\n */\nexport class Button {\n    /**\n     * The type of the button\n     */\n    readonly type: \"reply\";\n    /**\n     * The reply object of the row\n     */\n    readonly reply: {\n        /**\n         * The id of the row\n         */\n        id: string;\n        /**\n         * The title of the row\n         */\n        title: string;\n    };\n\n    /**\n     * Builds a button component for ActionButtons\n     *\n     * @param id - Unique identifier for your button. It cannot have leading or trailing spaces. This ID is returned in the webhook when the button is clicked by the user. Maximum length: 256 characters.\n     * @param title - Button title. It cannot be an empty string and must be unique within the message. Emojis are supported, markdown is not. Maximum length: 20 characters.\n     * @throws If id is over 256 characters\n     * @throws If id is malformed\n     * @throws If title is an empty string\n     * @throws If title is over 20 characters\n     */\n    constructor(id: string, title: string) {\n        if (id.length > 256)\n            throw new Error(\"Button id must be 256 characters or less\");\n        if (/^ | $/.test(id))\n            throw new Error(\"Button id cannot have leading or trailing spaces\");\n        if (!title.length)\n            throw new Error(\"Button title cannot be an empty string\");\n        if (title.length > 20)\n            throw new Error(\"Button title must be 20 characters or less\");\n\n        this.type = \"reply\";\n        this.reply = {\n            title,\n            id\n        };\n    }\n}\n\n/**\n * Action API object\n *\n * @group Interactive\n */\nexport class ActionList\n    extends ClientLimitedMessageComponent<ListSection, 10>\n    implements InteractiveAction\n{\n    /**\n     * The button text\n     */\n    readonly button: string;\n    /**\n     * The sections of the action\n     */\n    readonly sections: ListSection[];\n\n    /**\n     * @override\n     * @internal\n     */\n    get _type(): \"list\" {\n        return \"list\";\n    }\n\n    /**\n     * Builds an action component for an Interactive message\n     * Required if interactive type is \"list\"\n     *\n     * @param button - Button content. It cannot be an empty string and must be unique within the message. Emojis are supported, markdown is not. Maximum length: 20 characters.\n     * @param sections - Sections of the list\n     * @throws If button is an empty string\n     * @throws If button is over 20 characters\n     * @throws If more than 10 sections are provided\n     * @throws If more than 1 section is provided and at least one doesn't have a title\n     */\n    constructor(button: string, ...sections: AtLeastOne<ListSection>) {\n        super(\"Action\", \"sections\", sections, 10);\n\n        if (!button.length)\n            throw new Error(\"Button content cannot be an empty string\");\n        if (button.length > 20)\n            throw new Error(\"Button content must be 20 characters or less\");\n        if (sections.length > 1 && !sections.every((obj) => !!obj.title))\n            throw new Error(\n                \"All sections must have a title if more than 1 section is provided\"\n            );\n\n        this.button = button;\n        this.sections = sections;\n    }\n}\n\n/**\n * Section API object\n *\n * @group Interactive\n */\nexport class ListSection extends Section<Row, 10> {\n    /**\n     * The rows of the section\n     */\n    readonly rows: Row[];\n\n    /**\n     * Builds a list section component for ActionList\n     *\n     * @param title - Title of the section, only required if there are more than one section\n     * @param rows - Rows of the list section\n     * @throws If title is over 24 characters if provided\n     * @throws If more than 10 rows are provided\n     */\n    constructor(title: string | undefined, ...rows: AtLeastOne<Row>) {\n        super(\"ListSection\", \"rows\", rows, 10, title);\n        this.rows = rows;\n    }\n}\n\n/**\n * Row API object\n *\n * @group Interactive\n */\nexport class Row {\n    /**\n     * The id of the row\n     */\n    readonly id: string;\n    /**\n     * The title of the row\n     */\n    readonly title: string;\n    /**\n     * The description of the row\n     */\n    readonly description?: string;\n\n    /**\n     * Builds a row component for a ListSection\n     *\n     * @param id - The id of the row. Maximum length: 200 characters.\n     * @param title - The title of the row. Maximum length: 24 characters.\n     * @param description - The description of the row. Maximum length: 72 characters.\n     * @throws If id is over 200 characters\n     * @throws If title is over 24 characters\n     * @throws If description is over 72 characters\n     */\n    constructor(id: string, title: string, description?: string) {\n        if (id.length > 200)\n            throw new Error(\"Row id must be 200 characters or less\");\n        if (title.length > 24)\n            throw new Error(\"Row title must be 24 characters or less\");\n        if (description && description.length > 72)\n            throw new Error(\"Row description must be 72 characters or less\");\n\n        this.id = id;\n        this.title = title;\n        if (description) this.description = description;\n    }\n}\n\n/**\n * Action API object\n *\n * @group Interactive\n */\nexport class ActionCatalog implements InteractiveAction {\n    /**\n     * The name of the component\n     */\n    readonly name: \"catalog_message\";\n    /**\n     * The thumbnail product to be shown in the catalog\n     */\n    readonly parameters?: {\n        thumbnail_product_retailer_id?: string;\n    };\n\n    /**\n     * @override\n     * @internal\n     */\n    get _type(): \"catalog_message\" {\n        return \"catalog_message\";\n    }\n\n    /**\n     * Builds a catalog component for an Interactive message\n     *\n     * @remarks\n     * Seems like the API throws an error if you try to send a catalog\n     * message without a thumbnail, but the signature will keep the\n     * optional parameter in case WhatsApp decides to make their API\n     * work as expected :)\n     *\n     * @param thumbnail - The thumbnail product to be shown in the catalog. If not provided, the first product will be used (or so says the docs, but it doesn't work).\n     */\n    constructor(thumbnail?: Product) {\n        this.name = \"catalog_message\";\n        if (thumbnail) {\n            this.parameters = {\n                thumbnail_product_retailer_id: thumbnail.product_retailer_id\n            };\n        }\n    }\n}\n\n/**\n * Action API object\n *\n * @group Interactive\n */\nexport class ActionProduct implements InteractiveAction {\n    /**\n     * The id of the catalog from where to get the products\n     */\n    readonly catalog_id: string;\n    /**\n     * The product to show in the message\n     */\n    readonly product_retailer_id: string;\n\n    /**\n     * @override\n     * @internal\n     */\n    get _type(): \"product\" {\n        return \"product\";\n    }\n\n    /**\n     * Builds a Single Product component for an Interactive message\n     *\n     * @param catalog_id - The catalog id\n     * @param product - The product to show in the message\n     */\n    constructor(catalog_id: string, product: Product) {\n        this.catalog_id = catalog_id;\n        this.product_retailer_id = product.product_retailer_id;\n    }\n}\n\n/**\n * Action API object\n *\n * @group Interactive\n */\nexport class ActionProductList\n    extends ClientLimitedMessageComponent<ProductSection, 10>\n    implements InteractiveAction\n{\n    /**\n     * The id of the catalog from where to get the products\n     */\n    readonly catalog_id: string;\n    /**\n     * The sections to show in the message\n     */\n    readonly sections: ProductSection[];\n\n    /**\n     * @override\n     * @internal\n     */\n    get _type(): \"product_list\" {\n        return \"product_list\";\n    }\n\n    /**\n     * Builds a Multi Product component for an Interactive message\n     *\n     * @param catalog_id - The catalog id\n     * @param sections - The product sections to show in the message\n     * @throws If more than 10 product sections are provided\n     * @throws If more than 1 product section is provided and at least one section is missing a title\n     */\n    constructor(catalog_id: string, ...sections: AtLeastOne<ProductSection>) {\n        super(\"ActionProductList\", \"sections\", sections, 10);\n\n        if (sections.length > 1) {\n            for (const obj of sections) {\n                if (!obj.title) {\n                    throw new Error(\n                        \"All sections must have a title if more than 1 section is provided\"\n                    );\n                }\n            }\n        }\n\n        this.catalog_id = catalog_id;\n        this.sections = sections;\n    }\n}\n\n/**\n * Action API object\n *\n * @group Interactive\n */\nexport class ActionCTA implements InteractiveAction {\n    /**\n     * The name of the component\n     */\n    readonly name = \"cta_url\";\n    /**\n     * The CTA parameters\n     */\n    readonly parameters: {\n        display_text: string;\n        url: string;\n    };\n\n    /**\n     * @override\n     * @internal\n     */\n    get _type(): \"cta_url\" {\n        return \"cta_url\";\n    }\n\n    /**\n     * Builds a call-to-action component for an Interactive message\n     *\n     * @param display_text - The text to be displayed in the CTA button\n     * @param url - The url to be opened when the CTA button is clicked\n     */\n    constructor(display_text: string, url: string) {\n        this.parameters = {\n            display_text,\n            url\n        };\n    }\n}\n\n/**\n * Action API object\n *\n * @group Interactive\n */\nexport abstract class ActionFlow implements InteractiveAction {\n    /**\n     * The name of the component\n     */\n    readonly name = \"flow\";\n    /**\n     * The Flow parameters\n     *\n     * @remarks TSDoc is unable to document this type properly, so most of\n     * the documentation is in the subclasses constructors instead.\n     */\n    readonly parameters: {\n        /**\n         * The Flow can be in either draft or published mode\n         */\n        mode: \"published\" | \"draft\";\n        /**\n         * The Flow version, must be 3\n         */\n        flow_message_version: \"3\";\n        /**\n         * Flow token that is generated by the business to serve as an identifier\n         */\n        flow_token: string;\n        /**\n         * Unique ID of the Flow provided by WhatsApp\n         */\n        flow_id: string;\n        /**\n         * Text on the CTA button, character limit - 20 characters (no emoji)\n         */\n        flow_cta: string;\n        /**\n         * The Flow type, if set to \"navigate\", flow_action_payload must be provided\n         */\n        flow_action: \"navigate\" | \"data_exchange\";\n        /**\n         * Required if flow_action is \"navigate\", should be omitted otherwise\n         */\n        flow_action_payload?: {\n            /**\n             * The ID of the first Screen\n             */\n            screen: string;\n            /**\n             * Optional input data for the first Screen of the Flow. If provided, this must be a non-empty object.\n             */\n            data?: unknown;\n        };\n    } & (\n        | {\n              flow_action: \"navigate\";\n              flow_action_payload: {\n                  screen: string;\n                  data?: unknown;\n              };\n          }\n        | {\n              flow_action: \"data_exchange\";\n              flow_action_payload?: never;\n          }\n    );\n\n    /**\n     * @override\n     * @internal\n     */\n    get _type(): \"flow\" {\n        return \"flow\";\n    }\n\n    /**\n     * Builds a flow component for an Interactive message\n     *\n     * @param parameters - The Flow parameters\n     * @throws If parameters.flow_cta is empty or over 20 characters\n     * @throws If parameters.flow_cta contains emojis\n     */\n    constructor(parameters: ActionFlow[\"parameters\"]) {\n        if (!parameters.flow_cta.length || parameters.flow_cta.length > 20) {\n            throw new Error(\"Flow CTA must be between 1 and 20 characters\");\n        }\n\n        if (/\\p{Extended_Pictographic}/u.test(parameters.flow_cta)) {\n            throw new Error(\"Flow CTA must not contain emoji\");\n        }\n\n        this.parameters = parameters;\n    }\n}\n\n/**\n * Action API object\n *\n * @group Interactive\n */\nexport class ActionNavigateFlow extends ActionFlow {\n    /**\n     * Builds a navigate flow component for an Interactive message\n     *\n     * @param flow_token - Flow token that is generated by the business to serve as an identifier\n     * @param flow_id - ID of the Flow provided by WhatsApp\n     * @param flow_cta - Text on the CTA button, character limit - 20 characters (no emoji)\n     * @param screen - The ID of the first Screen\n     * @param data - Optional input data for the first Screen of the Flow. If provided, this must be a non-empty object.\n     * @param mode - The Flow can be in either \"draft\" or \"published\" mode\n     * @param flow_message_version - The Flow version, must be \"3\"\n     * @throws If flow_cta is empty or over 20 characters\n     * @throws If flow_cta contains emojis\n     * @throws If data is provided and is an empty object\n     */\n    constructor(\n        flow_token: string,\n        flow_id: string,\n        flow_cta: string,\n        screen: string,\n        data?: unknown,\n        mode: \"published\" | \"draft\" = \"published\",\n        flow_message_version: \"3\" = \"3\"\n    ) {\n        super({\n            mode,\n            flow_message_version,\n            flow_token,\n            flow_id,\n            flow_cta,\n            flow_action: \"navigate\",\n            flow_action_payload: {\n                screen,\n                data\n            }\n        });\n\n        if (data && !Object.keys(data).length) {\n            throw new Error(\"Flow data must be a non-empty object if provided\");\n        }\n    }\n}\n\n/**\n * Action API object\n *\n * @group Interactive\n */\nexport class ActionDataExchangeFlow extends ActionFlow {\n    /**\n     * Builds a data exchange flow component for an Interactive message\n     *\n     * @param flow_token - Flow token that is generated by the business to serve as an identifier\n     * @param flow_id - ID of the Flow provided by WhatsApp\n     * @param flow_cta - Text on the CTA button, character limit - 20 characters (no emoji)\n     * @param mode - Must be \"published\" or \"draft\"\n     * @param flow_message_version - Must be \"3\"\n     */\n    constructor(\n        flow_token: string,\n        flow_id: string,\n        flow_cta: string,\n        mode: \"published\" | \"draft\" = \"published\",\n        flow_message_version: \"3\" = \"3\"\n    ) {\n        super({\n            mode,\n            flow_message_version,\n            flow_token,\n            flow_id,\n            flow_cta,\n            flow_action: \"data_exchange\"\n        });\n    }\n}\n\n/**\n * Action API object\n *\n * @group Interactive\n */\nexport class ActionLocation implements InteractiveAction {\n    /**\n     * The name of the component\n     */\n    readonly name = \"send_location\";\n\n    /**\n     * @override\n     * @internal\n     */\n    get _type(): \"location_request_message\" {\n        return \"location_request_message\";\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
