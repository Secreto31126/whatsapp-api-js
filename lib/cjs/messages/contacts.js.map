{
  "version": 3,
  "sources": ["../../../src/messages/contacts.ts"],
  "sourcesContent": ["import {\n    ClientMessage,\n    type ContactComponent,\n    ContactUniqueComponent,\n    ContactMultipleComponent\n} from \"../types.js\";\nimport type { AtLeastOne } from \"../utils\";\n\n/**\n * @group Contacts\n */\nexport type BuiltContact = {\n    name: Name;\n} & Partial<{\n    birthday: string;\n    org: Organization;\n    addresses: Address[];\n    phones: Phone[];\n    emails: Email[];\n    urls: Url[];\n}>;\n\n/**\n * Contacts API object\n *\n * @group Contacts\n */\nexport class Contacts extends ClientMessage {\n    /**\n     * The contacts of the message\n     */\n    readonly component: BuiltContact[];\n\n    /**\n     * @override\n     * @internal\n     */\n    get _type(): \"contacts\" {\n        return \"contacts\";\n    }\n\n    /**\n     * Create a Contacts object for the API\n     *\n     * @example\n     * ```ts\n     * import { Contacts, Name, Address, Phone } from \"whatsapp-api-js/messages\";\n     *\n     * const contact_message = new Contacts([\n     *     new Name(\"John Doe\", \"John\", \"Doe\", undefined, \"Mr.\", \"Jr.\"),\n     *     new Address(\n     *         \"United States\",\n     *         \"US\",\n     *         \"FL\",\n     *         \"Miami\",\n     *         \"221B Baker Street\",\n     *         \"33101\",\n     *         \"Mystery\"\n     *     ),\n     *     new Phone(\"+123456789\", \"Mystery\", \"123456789\")\n     * ]);\n     * ```\n     *\n     * @param contact - Array of contact's components\n     * @throws If contact contains multiple of the same components and _many is set to false (for example, Name, Birthday and Organization)\n     */\n    constructor(\n        ...contact: AtLeastOne<\n            Array<\n                | Address\n                | Birthday\n                | Email\n                | Name\n                | Organization\n                | Phone\n                | Url\n                | ContactComponent\n            >\n        >\n    ) {\n        super();\n\n        this.component = [];\n\n        for (const components of contact) {\n            const contact = {} as BuiltContact;\n\n            for (const component of components) {\n                const name = component._type as keyof typeof contact;\n\n                if (component._many) {\n                    if (!contact[name]) {\n                        Object.defineProperty(contact, name, {\n                            value: [] as Address[] | Email[] | Phone[] | Url[],\n                            enumerable: true\n                        });\n                    }\n\n                    const pointer = contact[name] as (typeof component)[];\n                    pointer.push(component._build() as ContactComponent);\n                } else {\n                    if (contact[name])\n                        throw new Error(\n                            `Contact already has a ${name} component and _many is set to false`\n                        );\n\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore - TS doesn't know that contact[name] will match the type of the built component\n                    contact[name] =\n                        // reduce ts-ignore impact\n                        component._build() as Exclude<\n                            (typeof contact)[keyof typeof contact],\n                            undefined\n                        >;\n                }\n            }\n\n            if (!contact.name)\n                throw new Error(\"Contact must have a name component\");\n\n            this.component.push(contact);\n        }\n    }\n\n    /**\n     * @override\n     * @internal\n     */\n    _build() {\n        return JSON.stringify(this.component);\n    }\n}\n\n/**\n * Address API object\n *\n * @group Contacts\n */\nexport class Address extends ContactMultipleComponent {\n    /**\n     * The country of the address\n     */\n    readonly country?: string;\n    /**\n     * The country code of the address\n     */\n    readonly country_code?: string;\n    /**\n     * The state of the address\n     */\n    readonly state?: string;\n    /**\n     * The city of the address\n     */\n    readonly city?: string;\n    /**\n     * The street of the address\n     */\n    readonly street?: string;\n    /**\n     * The zip code of the address\n     */\n    readonly zip?: string;\n    /**\n     * The type of the address\n     */\n    readonly type?: string;\n\n    /**\n     * @override\n     * @internal\n     */\n    get _type(): \"addresses\" {\n        return \"addresses\";\n    }\n\n    /**\n     * Builds an address object for a contact.\n     * A contact can contain multiple addresses objects.\n     *\n     * @param country - Full country name\n     * @param country_code - Two-letter country abbreviation\n     * @param state - State abbreviation\n     * @param city - City name\n     * @param street - Street number and name\n     * @param zip - ZIP code\n     * @param type - Address type. Standard Values: HOME, WORK\n     */\n    constructor(\n        country?: string,\n        country_code?: string,\n        state?: string,\n        city?: string,\n        street?: string,\n        zip?: string,\n        type?: string\n    ) {\n        super();\n        if (country) this.country = country;\n        if (country_code) this.country_code = country_code;\n        if (state) this.state = state;\n        if (city) this.city = city;\n        if (street) this.street = street;\n        if (zip) this.zip = zip;\n        if (type) this.type = type;\n    }\n}\n\n/**\n * Birthday API object\n *\n * @group Contacts\n */\nexport class Birthday extends ContactUniqueComponent {\n    /**\n     * The birthday of the contact\n     */\n    readonly birthday: string;\n\n    /**\n     * @override\n     * @internal\n     */\n    get _type(): \"birthday\" {\n        return \"birthday\";\n    }\n\n    /**\n     * Builds a birthday object for a contact\n     *\n     * @param year - Year of birth (YYYY)\n     * @param month - Month of birth (MM)\n     * @param day - Day of birth (DD)\n     * @throws If the year, month, or day doesn't have a valid length\n     */\n    constructor(year: string, month: string, day: string) {\n        super();\n        if (year.length !== 4) throw new Error(\"Year must be 4 digits\");\n        if (month.length !== 2) throw new Error(\"Month must be 2 digits\");\n        if (day.length !== 2) throw new Error(\"Day must be 2 digits\");\n        this.birthday = `${year}-${month}-${day}`;\n    }\n\n    /**\n     * @override\n     * @internal\n     */\n    _build() {\n        return this.birthday;\n    }\n}\n\n/**\n * Email API object\n *\n * @group Contacts\n */\nexport class Email extends ContactMultipleComponent {\n    /**\n     * The email of the contact\n     */\n    readonly email?: string;\n    /**\n     * The type of the email\n     */\n    readonly type?: string;\n\n    /**\n     * @override\n     * @internal\n     */\n    get _type(): \"emails\" {\n        return \"emails\";\n    }\n\n    /**\n     * Builds an email object for a contact.\n     * A contact can contain multiple emails objects.\n     *\n     * @param email - Email address\n     * @param type - Email type. Standard Values: HOME, WORK\n     */\n    constructor(email?: string, type?: string) {\n        super();\n        if (email) this.email = email;\n        if (type) this.type = type;\n    }\n}\n\n/**\n * Name API object\n *\n * @group Contacts\n */\nexport class Name extends ContactUniqueComponent {\n    /**\n     * The formatted name of the contact\n     */\n    readonly formatted_name: string;\n    /**\n     * The first name of the contact\n     */\n    readonly first_name?: string;\n    /**\n     * The last name of the contact\n     */\n    readonly last_name?: string;\n    /**\n     * The middle name of the contact\n     */\n    readonly middle_name?: string;\n    /**\n     * The suffix of the contact\n     */\n    readonly suffix?: string;\n    /**\n     * The prefix of the contact\n     */\n    readonly prefix?: string;\n\n    /**\n     * @override\n     * @internal\n     */\n    get _type(): \"name\" {\n        return \"name\";\n    }\n\n    /**\n     * Builds a name object for a contact, required for contacts.\n     * The object requires a formatted_name and at least another property.\n     *\n     * @param formatted_name - Full name, as it normally appears\n     * @param first_name - First name\n     * @param last_name - Last name\n     * @param middle_name - Middle name\n     * @param suffix - Name suffix\n     * @param prefix - Name prefix\n     * @throws If no other component apart from formatted_name is defined\n     */\n    constructor(\n        formatted_name: string,\n        first_name?: string,\n        last_name?: string,\n        middle_name?: string,\n        suffix?: string,\n        prefix?: string\n    ) {\n        super();\n\n        this.formatted_name = formatted_name;\n        if (first_name) this.first_name = first_name;\n        if (last_name) this.last_name = last_name;\n        if (middle_name) this.middle_name = middle_name;\n        if (suffix) this.suffix = suffix;\n        if (prefix) this.prefix = prefix;\n\n        if (Object.keys(this).length < 2) {\n            throw new Error(\n                \"Name must have at least one of the following: first_name, last_name, middle_name, prefix, suffix\"\n            );\n        }\n    }\n}\n\n/**\n * Organization API object\n *\n * @group Contacts\n */\nexport class Organization extends ContactUniqueComponent {\n    /**\n     * The company of the contact\n     */\n    readonly company?: string;\n    /**\n     * The department of the contact\n     */\n    readonly department?: string;\n    /**\n     * The title of the contact\n     */\n    readonly title?: string;\n\n    /**\n     * @override\n     * @internal\n     */\n    get _type(): \"org\" {\n        return \"org\";\n    }\n\n    /**\n     * Builds an organization object for a contact\n     *\n     * @param company - Name of the contact's company\n     * @param department - Name of the contact's department\n     * @param title - Contact's business title\n     */\n    constructor(company?: string, department?: string, title?: string) {\n        super();\n        if (company) this.company = company;\n        if (department) this.department = department;\n        if (title) this.title = title;\n    }\n}\n\n/**\n * Phone API object\n *\n * @group Contacts\n */\nexport class Phone extends ContactMultipleComponent {\n    /**\n     * The phone number of the contact\n     */\n    readonly phone?: string;\n    /**\n     * The type of the phone number\n     */\n    readonly type?: string;\n    /**\n     * The WhatsApp ID of the contact\n     */\n    readonly wa_id?: string;\n\n    /**\n     * @override\n     * @internal\n     */\n    get _type(): \"phones\" {\n        return \"phones\";\n    }\n\n    /**\n     * Builds a phone object for a contact.\n     * A contact can contain multiple phones objects.\n     *\n     * @param phone - Phone number, automatically populated with the wa_id value as a formatted phone number\n     * @param type - Phone type. Standard Values: CELL, MAIN, IPHONE, HOME, WORK\n     * @param wa_id - WhatsApp ID\n     */\n    constructor(phone?: string, type?: string, wa_id?: string) {\n        super();\n        if (phone) this.phone = phone;\n        if (type) this.type = type;\n        if (wa_id) this.wa_id = wa_id;\n    }\n}\n\n/**\n * Url API object\n *\n * @group Contacts\n */\nexport class Url extends ContactMultipleComponent {\n    /**\n     * The URL of the contact\n     */\n    readonly url?: string;\n    /**\n     * The type of the URL\n     */\n    readonly type?: string;\n\n    /**\n     * @override\n     * @internal\n     */\n    get _type(): \"urls\" {\n        return \"urls\";\n    }\n\n    /**\n     * Builds an url object for a contact.\n     * A contact can contain multiple urls objects.\n     *\n     * @param url - URL\n     * @param type - URL type. Standard Values: HOME, WORK\n     */\n    constructor(url?: string, type?: string) {\n        super();\n        if (url) this.url = url;\n        if (type) this.type = type;\n    }\n}\n"],
  "mappings": "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",
  "names": ["contact"]
}
